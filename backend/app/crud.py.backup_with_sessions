from sqlalchemy.orm import Session
from sqlalchemy import and_, func
import models
import schemas
from auth import get_password_hash, verify_password
import hashlib
import json
from datetime import datetime
from typing import List, Dict, Any

def create_user(db: Session, user_data: schemas.UserCreate):
    hashed_password = get_password_hash(user_data.password)
    db_user = models.User(
        email=user_data.email,
        username=user_data.username,
        hashed_password=hashed_password,
        grade=user_data.grade,
        current_subject=user_data.current_subject,
        parent_name=user_data.parent_name,
        parent_email=user_data.parent_email,
        age=user_data.age,
        school=user_data.school,
        real_grade=user_data.real_grade,
        city=user_data.city
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∞—Å—Å–æ–≤
    grade_history = models.UserGradeHistory(
        user_id=db_user.id,
        grade=db_user.grade,
        start_date=db_user.created_at
    )
    db.add(grade_history)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    subject_history = models.UserSubjectHistory(
        user_id=db_user.id,
        subject=db_user.current_subject
    )
    db.add(subject_history)
    
    db.commit()
    return db_user

def get_user_by_email(db: Session, email: str):
    return db.query(models.User).filter(models.User.email == email).first()

def get_user_by_id(db: Session, user_id: int):
    return db.query(models.User).filter(models.User.id == user_id).first()

def update_user_profile(db: Session, user_id: int, profile_data: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user_by_id(db, user_id)
    if not user:
        return None
    
    for field, value in profile_data.items():
        if hasattr(user, field):
            setattr(user, field, value)
    
    db.commit()
    db.refresh(user)
    return user

def update_user_subject(db: Session, user_id: int, new_subject: str):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_user_by_id(db, user_id)
    if not user:
        return None
    
    user.current_subject = new_subject
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    subject_history = models.UserSubjectHistory(
        user_id=user_id,
        subject=new_subject
    )
    db.add(subject_history)
    db.commit()
    db.refresh(user)
    return user

def get_user_subject_history(db: Session, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return db.query(models.UserSubjectHistory).filter(
        models.UserSubjectHistory.user_id == user_id
    ).order_by(models.UserSubjectHistory.start_date.desc()).all()

def authenticate_user(db: Session, email: str, password: str):
    user = get_user_by_email(db, email)
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user

def get_user_task_versions(db: Session, user_id: int) -> list:
    return db.query(models.TaskVersion).filter(
        models.TaskVersion.user_id == user_id
    ).order_by(models.TaskVersion.created_at.desc()).all()

def get_current_task_version(db: Session, user_id: int):
    return db.query(models.TaskVersion).filter(
        models.TaskVersion.user_id == user_id
    ).order_by(models.TaskVersion.created_at.desc()).first()

def save_user_tasks(db: Session, user_id: int, day: int, tasks: list):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    db.query(models.UserTask).filter(
        and_(
            models.UserTask.user_id == user_id,
            models.UserTask.day == day
        )
    ).delete()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
    for index, task in enumerate(tasks):
        user_task = models.UserTask(
            user_id=user_id,
            day=day,
            task_index=index,
            question=task.get('question', ''),
            answer=task.get('answer', ''),
            explanation=task.get('explanation', ''),
            answer_format=task.get('answer_format', 'number'),
            translation_key=task.get('translation_key'),
            translation_params=task.get('translation_params'),
            task_data=task.get('task_data')
        )
        db.add(user_task)
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –∑–∞–¥–∞–Ω–∏–π
    version_hash = create_version_hash(user_id, tasks)
    
    task_version = models.TaskVersion(
        user_id=user_id,
        version_hash=version_hash
    )
    db.add(task_version)
    
    db.commit()
    
    return {
        "status": "success",
        "day": day,
        "tasks_count": len(tasks),
        "version_hash": version_hash
    }

def create_version_hash(user_id: int, tasks: list) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ö—ç—à –≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tasks_data = json.dumps(tasks, sort_keys=True)
    hash_input = f"{user_id}_{tasks_data}"
    return hashlib.md5(hash_input.encode()).hexdigest()

def get_user_tasks(db: Session, user_id: int):
    tasks = db.query(models.UserTask).filter(
        models.UserTask.user_id == user_id
    ).order_by(models.UserTask.day, models.UserTask.task_index).all()
    
    result = {}
    for task in tasks:
        if str(task.day) not in result:
            result[str(task.day)] = []
        
        result[str(task.day)].append({
            "question": task.question,
            "answer": task.answer,
            "explanation": task.explanation,
            "answer_format": task.answer_format,
            "translation_key": task.translation_key,
            "translation_params": task.translation_params,
            "task_data": task.task_data
        })
    
    return result

def save_user_answer(db: Session, user_id: int, day: int, task_index: int, 
                    answer: str, is_correct: bool, task_version_id: int):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    db.query(models.UserAnswer).filter(
        and_(
            models.UserAnswer.user_id == user_id,
            models.UserAnswer.day == day,
            models.UserAnswer.task_index == task_index
        )
    ).delete()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    user_answer = models.UserAnswer(
        user_id=user_id,
        task_version_id=task_version_id,
        day=day,
        task_index=task_index,
        answer=answer,
        is_correct=is_correct
    )
    db.add(user_answer)
    
    # üü¢ –û–ë–ù–û–í–õ–Ø–ï–ú –ü–†–û–ì–†–ï–°–° –ü–û–°–õ–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø –û–¢–í–ï–¢–ê
    update_progress_after_answer(db, user_id, day)
    
    db.commit()
    db.refresh(user_answer)
    
    return {
        "status": "success",
        "day": day,
        "task_index": task_index,
        "answer": answer,
        "is_correct": is_correct
    }

def get_total_tasks_for_day(db: Session, user_id: int, day: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return db.query(models.UserTask).filter(
        and_(
            models.UserTask.user_id == user_id,
            models.UserTask.day == day
        )
    ).count()

def update_progress_after_answer(db: Session, user_id: int, day: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è - –î–û–ë–ê–í–õ–Ø–ï–ú COMMIT –ü–ï–†–ï–î –ü–û–î–°–ß–ï–¢–û–ú
    db.commit()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    
    correct_answers_count = db.query(models.UserAnswer).filter(
        and_(
            models.UserAnswer.user_id == user_id,
            models.UserAnswer.day == day,
            models.UserAnswer.is_correct == True
        )
    ).count()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    total_tasks = get_total_tasks_for_day(db, user_id, day)
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10
    if total_tasks == 0:
        total_tasks = 10
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = db.query(models.UserProgress).filter(
        and_(
            models.UserProgress.user_id == user_id,
            models.UserProgress.day == day
        )
    ).first()
    
    if progress:
        progress.completed_tasks = correct_answers_count
        progress.total_tasks = total_tasks
        progress.updated_at = datetime.utcnow()
    else:
        progress = models.UserProgress(
            user_id=user_id,
            day=day,
            completed_tasks=correct_answers_count,
            total_tasks=total_tasks
        )
        db.add(progress)
    
    db.commit()

def get_user_answers(db: Session, user_id: int, version_id: int = None):
    query = db.query(models.UserAnswer).filter(
        models.UserAnswer.user_id == user_id
    )
    
    if version_id:
        query = query.filter(models.UserAnswer.task_version_id == version_id)
    
    answers = query.all()
    
    result = {}
    for answer in answers:
        if str(answer.day) not in result:
            result[str(answer.day)] = {}
        
        result[str(answer.day)][str(answer.task_index)] = {
            "answer": answer.answer,
            "is_correct": answer.is_correct,
            "created_at": answer.created_at.isoformat() if answer.created_at else None
        }
    
    return result

def get_user_progress(db: Session, user_id: int):
    progress = db.query(models.UserProgress).filter(
        models.UserProgress.user_id == user_id
    ).all()
    
    result = {}
    for p in progress:
        result[str(p.day)] = {
            "completed_tasks": p.completed_tasks,
            "total_tasks": p.total_tasks or 10
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (0 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö)
    user_tasks = db.query(models.UserTask).filter(
        models.UserTask.user_id == user_id
    ).all()
    
    days_with_tasks = set(str(task.day) for task in user_tasks)
    for day in days_with_tasks:
        if day not in result:
            # –î–ª—è –¥–Ω–µ–π –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
            total_tasks = get_total_tasks_for_day(db, user_id, int(day))
            result[day] = {
                "completed_tasks": 0,
                "total_tasks": total_tasks if total_tasks > 0 else 10
            }
    
    return result

def update_user_progress(db: Session, user_id: int, day: int, completed_tasks: int):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–Ω—è
    total_tasks = get_total_tasks_for_day(db, user_id, day)
    if total_tasks == 0:
        total_tasks = 10
    
    progress = db.query(models.UserProgress).filter(
        and_(
            models.UserProgress.user_id == user_id,
            models.UserProgress.day == day
        )
    ).first()
    
    if progress:
        progress.completed_tasks = completed_tasks
        progress.total_tasks = total_tasks
        progress.updated_at = datetime.utcnow()
    else:
        progress = models.UserProgress(
            user_id=user_id,
            day=day,
            completed_tasks=completed_tasks,
            total_tasks=total_tasks
        )
        db.add(progress)
    
    db.commit()
    db.refresh(progress)
    return progress

def reset_user_progress(db: Session, user_id: int):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    db.query(models.UserProgress).filter(
        models.UserProgress.user_id == user_id
    ).delete()
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
    db.query(models.UserAnswer).filter(
        models.UserAnswer.user_id == user_id
    ).delete()
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è
    db.query(models.UserTask).filter(
        models.UserTask.user_id == user_id
    ).delete()
    
    # –£–¥–∞–ª—è–µ–º –≤–µ—Ä—Å–∏–∏
    db.query(models.TaskVersion).filter(
        models.TaskVersion.user_id == user_id
    ).delete()
    
    db.commit()
    
    return {"status": "success", "message": "Progress reset successfully"}

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
def get_user_teachers(db: Session, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return db.query(models.UserTeacher).filter(
        models.UserTeacher.user_id == user_id
    ).order_by(models.UserTeacher.created_at.desc()).all()

def add_user_teacher(db: Session, user_id: int, teacher_data: schemas.TeacherCreate):
    """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    teacher = models.UserTeacher(
        user_id=user_id,
        teacher_name=teacher_data.teacher_name,
        subject=teacher_data.subject,
        custom_subject=teacher_data.custom_subject
    )
    db.add(teacher)
    db.commit()
    db.refresh(teacher)
    return teacher

def remove_user_teacher(db: Session, teacher_id: int, user_id: int):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    teacher = db.query(models.UserTeacher).filter(
        and_(
            models.UserTeacher.id == teacher_id,
            models.UserTeacher.user_id == user_id
        )
    ).first()
    
    if teacher:
        db.delete(teacher)
        db.commit()
        return True
    return False

def update_user_teachers(db: Session, user_id: int, teachers_data: list):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    db.query(models.UserTeacher).filter(
        models.UserTeacher.user_id == user_id
    ).delete()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö
    for teacher_data in teachers_data:
        teacher = models.UserTeacher(
            user_id=user_id,
            teacher_name=teacher_data['teacher_name'],
            subject=teacher_data['subject'],
            custom_subject=teacher_data.get('custom_subject')
        )
        db.add(teacher)
    
    db.commit()
    return True

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_user_progress_stats(db: Session, user_id: int, subject: str = None) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–Ω—è–º - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    query = db.query(models.UserProgress).filter(
        models.UserProgress.user_id == user_id
    )
    
    if subject:
        query = query.filter(models.UserProgress.subject == subject)
    
    progress_data = query.order_by(models.UserProgress.day).all()
    
    stats = []
    for progress in progress_data:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã, –∞ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        total_tasks = progress.total_tasks
        completed_tasks = progress.completed_tasks
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if total_tasks == 0:
            total_tasks = 10  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        
        progress_percentage = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
        
        stats.append({
            "day": progress.day,
            "completed_tasks": completed_tasks,
            "total_tasks": total_tasks,
            "progress_percentage": round(progress_percentage, 2),
            "subject": progress.subject
        })
    
    return stats

def get_user_performance_stats(db: Session, user_id: int, subject: str = None) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏"""
    query = db.query(models.UserAnswer).filter(
        models.UserAnswer.user_id == user_id
    )
    
    if subject:
        query = query.filter(models.UserAnswer.subject == subject)
    
    answers = query.all()
    
    total_answers = len(answers)
    correct_answers = sum(1 for answer in answers if answer.is_correct)
    incorrect_answers = total_answers - correct_answers
    success_rate = (correct_answers / total_answers * 100) if total_answers > 0 else 0
    
    return {
        "total_answers": total_answers,
        "correct_answers": correct_answers,
        "incorrect_answers": incorrect_answers,
        "success_rate": round(success_rate, 2),
        "subject": subject
    }

def get_user_stats_overview(db: Session, user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–Ω—è–º
    progress_stats = get_user_progress_stats(db, user_id)
    
    # –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å
    performance_stats = get_user_performance_stats(db, user_id)
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_days = len(progress_stats)
    completed_days = sum(1 for day in progress_stats if day["progress_percentage"] >= 100)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∞ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    total_tasks = sum(day["total_tasks"] for day in progress_stats)
    completed_tasks = sum(day["completed_tasks"] for day in progress_stats)
    
    overall_progress = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
    overall_success_rate = performance_stats["success_rate"]
    
    average_daily_progress = (sum(day["progress_percentage"] for day in progress_stats) / total_days) if total_days > 0 else 0
    
    return {
        "total_days": total_days,
        "completed_days": completed_days,
        "total_tasks": total_tasks,
        "completed_tasks": completed_tasks,
        "overall_progress": round(overall_progress, 2),
        "overall_success_rate": round(overall_success_rate, 2),
        "average_daily_progress": round(average_daily_progress, 2)
    }
