{"ast":null,"code":"// day6-coordinates.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const coordinatesGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n    switch (type) {\n      case 1:\n        // Определение координат точки\n        const x1 = getRandomInt(-5, 5);\n        const y1 = getRandomInt(-5, 5);\n        question = `Какие координаты у точки (${x1}, ${y1})?`;\n        translationKey = 'tasks.coordinates.point_coordinates';\n        translationParams = {\n          x: x1,\n          y: y1\n        };\n        answer = `(${x1}, ${y1})`;\n        explanation = `Точка имеет координаты (${x1}, ${y1}) - x=${x1}, y=${y1}`;\n        explanationKey = 'tasks.coordinates.point_coordinates_explanation';\n        explanationParams = {\n          x: x1,\n          y: y1\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 2:\n        // Построение точки по координатам\n        const x2 = getRandomInt(-4, 4);\n        const y2 = getRandomInt(-4, 4);\n        const positionX = x2 > 0 ? 'правой' : 'левой';\n        const positionY = y2 > 0 ? 'верхней' : 'нижней';\n        question = `Постройте точку с координаты (${x2}, ${y2})`;\n        translationKey = 'tasks.coordinates.plot_point';\n        translationParams = {\n          x: x2,\n          y: y2\n        };\n        answer = `Точка в ${positionX} части, ${positionY} половине`;\n        explanation = `Точка (${x2}, ${y2}) находится в ${positionX} части и ${positionY} половине плоскости`;\n        explanationKey = 'tasks.coordinates.plot_point_explanation';\n        explanationParams = {\n          x: x2,\n          y: y2,\n          positionX,\n          positionY\n        };\n        answerFormat = \"описание положения\";\n        formatKey = 'answerFormats.description';\n        break;\n      case 3:\n        // Определение четверти\n        const x3 = getRandomInt(-5, 5);\n        const y3 = getRandomInt(-5, 5);\n        let quarter3 = '';\n        if (x3 > 0 && y3 > 0) quarter3 = 'I';else if (x3 < 0 && y3 > 0) quarter3 = 'II';else if (x3 < 0 && y3 < 0) quarter3 = 'III';else if (x3 > 0 && y3 < 0) quarter3 = 'IV';else quarter3 = 'на оси';\n        question = `В какой четверти находится точка (${x3}, ${y3})?`;\n        translationKey = 'tasks.coordinates.find_quarter';\n        translationParams = {\n          x: x3,\n          y: y3\n        };\n        answer = quarter3;\n        explanation = `Точка (${x3}, ${y3}) находится ${quarter3 === 'на оси' ? 'на оси координат' : 'в ' + quarter3 + ' четверти'}`;\n        explanationKey = 'tasks.coordinates.find_quarter_explanation';\n        explanationParams = {\n          x: x3,\n          y: y3,\n          quarter: quarter3\n        };\n        answerFormat = \"номер четверти (I,II,III,IV)\";\n        formatKey = 'answerFormats.quarter';\n        break;\n      case 4:\n        // Расстояние между точками\n        const x4_1 = getRandomInt(-3, 3);\n        const y4_1 = getRandomInt(-3, 3);\n        const x4_2 = getRandomInt(-3, 3);\n        const y4_2 = getRandomInt(-3, 3);\n        const distance4 = Math.sqrt(Math.pow(x4_2 - x4_1, 2) + Math.pow(y4_2 - y4_1, 2)).toFixed(2);\n        question = `Найдите расстояние между точками (${x4_1}, ${y4_1}) и (${x4_2}, ${y4_2})`;\n        translationKey = 'tasks.coordinates.distance_between';\n        translationParams = {\n          x1: x4_1,\n          y1: y4_1,\n          x2: x4_2,\n          y2: y4_2\n        };\n        answer = distance4;\n        explanation = `Расстояние = √((${x4_2}-${x4_1})² + (${y4_2}-${y4_1})²) = ${distance4}`;\n        explanationKey = 'tasks.coordinates.distance_between_explanation';\n        explanationParams = {\n          x1: x4_1,\n          y1: y4_1,\n          x2: x4_2,\n          y2: y4_2,\n          result: distance4\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 5:\n        // Симметрия относительно оси X\n        const x5 = getRandomInt(-4, 4);\n        const y5 = getRandomInt(-4, 4);\n        const symmetricX = `(${x5}, ${-y5})`;\n        question = `Найдите точку, симметричную (${x5}, ${y5}) относительно оси X`;\n        translationKey = 'tasks.coordinates.symmetry_x';\n        translationParams = {\n          x: x5,\n          y: y5\n        };\n        answer = symmetricX;\n        explanation = `Симметрия относительно X: y меняет знак → ${symmetricX}`;\n        explanationKey = 'tasks.coordinates.symmetry_x_explanation';\n        explanationParams = {\n          x: x5,\n          y: y5,\n          result: symmetricX\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 6:\n        // Симметрия относительно оси Y\n        const x6 = getRandomInt(-4, 4);\n        const y6 = getRandomInt(-4, 4);\n        const symmetricY = `(${-x6}, ${y6})`;\n        question = `Найдите точку, симметричную (${x6}, ${y6}) относительно оси Y`;\n        translationKey = 'tasks.coordinates.symmetry_y';\n        translationParams = {\n          x: x6,\n          y: y6\n        };\n        answer = symmetricY;\n        explanation = `Симметрия относительно Y: x меняет знак → ${symmetricY}`;\n        explanationKey = 'tasks.coordinates.symmetry_y_explanation';\n        explanationParams = {\n          x: x6,\n          y: y6,\n          result: symmetricY\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 7:\n        // Симметрия относительно начала координат\n        const x7 = getRandomInt(-4, 4);\n        const y7 = getRandomInt(-4, 4);\n        const symmetricOrigin = `(${-x7}, ${-y7})`;\n        question = `Найдите точку, симметричную (${x7}, ${y7}) относительно начала координат`;\n        translationKey = 'tasks.coordinates.symmetry_origin';\n        translationParams = {\n          x: x7,\n          y: y7\n        };\n        answer = symmetricOrigin;\n        explanation = `Симметрия относительно (0,0): x и y меняют знак → ${symmetricOrigin}`;\n        explanationKey = 'tasks.coordinates.symmetry_origin_explanation';\n        explanationParams = {\n          x: x7,\n          y: y7,\n          result: symmetricOrigin\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 8:\n        // Точка на оси\n        const axis8 = ['X', 'Y'][getRandomInt(0, 1)];\n        const coord8 = getRandomInt(-5, 5);\n        const point8 = axis8 === 'X' ? `(${coord8}, 0)` : `(0, ${coord8})`;\n        question = `Запишите координаты точки на оси ${axis8} с координатой ${coord8}`;\n        translationKey = 'tasks.coordinates.on_axis';\n        translationParams = {\n          axis: axis8,\n          coord: coord8\n        };\n        answer = point8;\n        explanation = `На оси ${axis8} вторая координата равна 0 → ${point8}`;\n        explanationKey = 'tasks.coordinates.on_axis_explanation';\n        explanationParams = {\n          axis: axis8,\n          coord: coord8,\n          result: point8\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 9:\n        // Определение по описанию\n        const quadrants = [{\n          q: 'I',\n          desc: 'правая верхняя'\n        }, {\n          q: 'II',\n          desc: 'левая верхняя'\n        }, {\n          q: 'III',\n          desc: 'левая нижняя'\n        }, {\n          q: 'IV',\n          desc: 'правая нижняя'\n        }];\n        const quadrant9 = quadrants[getRandomInt(0, 3)];\n        question = `В какой четверти находятся точки с ${quadrant9.desc} четверти?`;\n        translationKey = 'tasks.coordinates.by_description';\n        translationParams = {\n          description: quadrant9.desc\n        };\n        answer = quadrant9.q;\n        explanation = `${quadrant9.desc} четверть → ${quadrant9.q} четверть`;\n        explanationKey = 'tasks.coordinates.by_description_explanation';\n        explanationParams = {\n          description: quadrant9.desc,\n          result: quadrant9.q\n        };\n        answerFormat = \"номер четверти (I,II,III,IV)\";\n        formatKey = 'answerFormats.quarter';\n        break;\n      case 10:\n        // Координаты вершин прямоугольника\n        const x10 = getRandomInt(1, 3);\n        const y10 = getRandomInt(1, 3);\n        const width10 = getRandomInt(2, 4);\n        const height10 = getRandomInt(2, 4);\n        const vertices = [`(${x10},${y10})`, `(${x10 + width10},${y10})`, `(${x10 + width10},${y10 + height10})`, `(${x10},${y10 + height10})`].join(', ');\n        question = `Найдите координаты всех вершин прямоугольника с левым нижним углом (${x10}, ${y10}), шириной ${width10} и высотой ${height10}`;\n        translationKey = 'tasks.coordinates.rectangle_vertices';\n        translationParams = {\n          x: x10,\n          y: y10,\n          width: width10,\n          height: height10\n        };\n        answer = vertices;\n        explanation = `Вершины: (${x10},${y10}) → (+${width10},0) → (${x10 + width10},${y10}) → (0,+${height10}) → (${x10 + width10},${y10 + height10})`;\n        explanationKey = 'tasks.coordinates.rectangle_vertices_explanation';\n        explanationParams = {\n          x: x10,\n          y: y10,\n          width: width10,\n          height: height10,\n          result: vertices\n        };\n        answerFormat = \"список координат через запятую\";\n        formatKey = 'answerFormats.coordinates_list';\n        break;\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({\n        question,\n        answer,\n        explanation,\n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey,\n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","coordinatesGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","x1","y1","x","y","x2","y2","positionX","positionY","x3","y3","quarter3","quarter","x4_1","y4_1","x4_2","y4_2","distance4","sqrt","pow","toFixed","result","x5","y5","symmetricX","x6","y6","symmetricY","x7","y7","symmetricOrigin","axis8","coord8","point8","axis","coord","quadrants","q","desc","quadrant9","description","x10","y10","width10","height10","vertices","join","width","height","has","add","push"],"sources":["/opt/math-app/frontend/src/taskGenerators/day6-coordinates.js"],"sourcesContent":["// day6-coordinates.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const coordinatesGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Определение координат точки\n        const x1 = getRandomInt(-5, 5);\n        const y1 = getRandomInt(-5, 5);\n        question = `Какие координаты у точки (${x1}, ${y1})?`;\n        translationKey = 'tasks.coordinates.point_coordinates';\n        translationParams = { x: x1, y: y1 };\n        answer = `(${x1}, ${y1})`;\n        explanation = `Точка имеет координаты (${x1}, ${y1}) - x=${x1}, y=${y1}`;\n        explanationKey = 'tasks.coordinates.point_coordinates_explanation';\n        explanationParams = { x: x1, y: y1 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 2: // Построение точки по координатам\n        const x2 = getRandomInt(-4, 4);\n        const y2 = getRandomInt(-4, 4);\n        const positionX = x2 > 0 ? 'правой' : 'левой';\n        const positionY = y2 > 0 ? 'верхней' : 'нижней';\n        question = `Постройте точку с координаты (${x2}, ${y2})`;\n        translationKey = 'tasks.coordinates.plot_point';\n        translationParams = { x: x2, y: y2 };\n        answer = `Точка в ${positionX} части, ${positionY} половине`;\n        explanation = `Точка (${x2}, ${y2}) находится в ${positionX} части и ${positionY} половине плоскости`;\n        explanationKey = 'tasks.coordinates.plot_point_explanation';\n        explanationParams = { x: x2, y: y2, positionX, positionY };\n        answerFormat = \"описание положения\";\n        formatKey = 'answerFormats.description';\n        break;\n\n      case 3: // Определение четверти\n        const x3 = getRandomInt(-5, 5);\n        const y3 = getRandomInt(-5, 5);\n        let quarter3 = '';\n        if (x3 > 0 && y3 > 0) quarter3 = 'I';\n        else if (x3 < 0 && y3 > 0) quarter3 = 'II';\n        else if (x3 < 0 && y3 < 0) quarter3 = 'III';\n        else if (x3 > 0 && y3 < 0) quarter3 = 'IV';\n        else quarter3 = 'на оси';\n        \n        question = `В какой четверти находится точка (${x3}, ${y3})?`;\n        translationKey = 'tasks.coordinates.find_quarter';\n        translationParams = { x: x3, y: y3 };\n        answer = quarter3;\n        explanation = `Точка (${x3}, ${y3}) находится ${quarter3 === 'на оси' ? 'на оси координат' : 'в ' + quarter3 + ' четверти'}`;\n        explanationKey = 'tasks.coordinates.find_quarter_explanation';\n        explanationParams = { x: x3, y: y3, quarter: quarter3 };\n        answerFormat = \"номер четверти (I,II,III,IV)\";\n        formatKey = 'answerFormats.quarter';\n        break;\n\n      case 4: // Расстояние между точками\n        const x4_1 = getRandomInt(-3, 3);\n        const y4_1 = getRandomInt(-3, 3);\n        const x4_2 = getRandomInt(-3, 3);\n        const y4_2 = getRandomInt(-3, 3);\n        const distance4 = Math.sqrt(Math.pow(x4_2 - x4_1, 2) + Math.pow(y4_2 - y4_1, 2)).toFixed(2);\n        question = `Найдите расстояние между точками (${x4_1}, ${y4_1}) и (${x4_2}, ${y4_2})`;\n        translationKey = 'tasks.coordinates.distance_between';\n        translationParams = { x1: x4_1, y1: y4_1, x2: x4_2, y2: y4_2 };\n        answer = distance4;\n        explanation = `Расстояние = √((${x4_2}-${x4_1})² + (${y4_2}-${y4_1})²) = ${distance4}`;\n        explanationKey = 'tasks.coordinates.distance_between_explanation';\n        explanationParams = { x1: x4_1, y1: y4_1, x2: x4_2, y2: y4_2, result: distance4 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 5: // Симметрия относительно оси X\n        const x5 = getRandomInt(-4, 4);\n        const y5 = getRandomInt(-4, 4);\n        const symmetricX = `(${x5}, ${-y5})`;\n        question = `Найдите точку, симметричную (${x5}, ${y5}) относительно оси X`;\n        translationKey = 'tasks.coordinates.symmetry_x';\n        translationParams = { x: x5, y: y5 };\n        answer = symmetricX;\n        explanation = `Симметрия относительно X: y меняет знак → ${symmetricX}`;\n        explanationKey = 'tasks.coordinates.symmetry_x_explanation';\n        explanationParams = { x: x5, y: y5, result: symmetricX };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 6: // Симметрия относительно оси Y\n        const x6 = getRandomInt(-4, 4);\n        const y6 = getRandomInt(-4, 4);\n        const symmetricY = `(${-x6}, ${y6})`;\n        question = `Найдите точку, симметричную (${x6}, ${y6}) относительно оси Y`;\n        translationKey = 'tasks.coordinates.symmetry_y';\n        translationParams = { x: x6, y: y6 };\n        answer = symmetricY;\n        explanation = `Симметрия относительно Y: x меняет знак → ${symmetricY}`;\n        explanationKey = 'tasks.coordinates.symmetry_y_explanation';\n        explanationParams = { x: x6, y: y6, result: symmetricY };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 7: // Симметрия относительно начала координат\n        const x7 = getRandomInt(-4, 4);\n        const y7 = getRandomInt(-4, 4);\n        const symmetricOrigin = `(${-x7}, ${-y7})`;\n        question = `Найдите точку, симметричную (${x7}, ${y7}) относительно начала координат`;\n        translationKey = 'tasks.coordinates.symmetry_origin';\n        translationParams = { x: x7, y: y7 };\n        answer = symmetricOrigin;\n        explanation = `Симметрия относительно (0,0): x и y меняют знак → ${symmetricOrigin}`;\n        explanationKey = 'tasks.coordinates.symmetry_origin_explanation';\n        explanationParams = { x: x7, y: y7, result: symmetricOrigin };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 8: // Точка на оси\n        const axis8 = ['X', 'Y'][getRandomInt(0, 1)];\n        const coord8 = getRandomInt(-5, 5);\n        const point8 = axis8 === 'X' ? `(${coord8}, 0)` : `(0, ${coord8})`;\n        question = `Запишите координаты точки на оси ${axis8} с координатой ${coord8}`;\n        translationKey = 'tasks.coordinates.on_axis';\n        translationParams = { axis: axis8, coord: coord8 };\n        answer = point8;\n        explanation = `На оси ${axis8} вторая координата равна 0 → ${point8}`;\n        explanationKey = 'tasks.coordinates.on_axis_explanation';\n        explanationParams = { axis: axis8, coord: coord8, result: point8 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 9: // Определение по описанию\n        const quadrants = [\n          { q: 'I', desc: 'правая верхняя' },\n          { q: 'II', desc: 'левая верхняя' },\n          { q: 'III', desc: 'левая нижняя' },\n          { q: 'IV', desc: 'правая нижняя' }\n        ];\n        const quadrant9 = quadrants[getRandomInt(0, 3)];\n        question = `В какой четверти находятся точки с ${quadrant9.desc} четверти?`;\n        translationKey = 'tasks.coordinates.by_description';\n        translationParams = { description: quadrant9.desc };\n        answer = quadrant9.q;\n        explanation = `${quadrant9.desc} четверть → ${quadrant9.q} четверть`;\n        explanationKey = 'tasks.coordinates.by_description_explanation';\n        explanationParams = { description: quadrant9.desc, result: quadrant9.q };\n        answerFormat = \"номер четверти (I,II,III,IV)\";\n        formatKey = 'answerFormats.quarter';\n        break;\n\n      case 10: // Координаты вершин прямоугольника\n        const x10 = getRandomInt(1, 3);\n        const y10 = getRandomInt(1, 3);\n        const width10 = getRandomInt(2, 4);\n        const height10 = getRandomInt(2, 4);\n        const vertices = [\n          `(${x10},${y10})`,\n          `(${x10+width10},${y10})`,\n          `(${x10+width10},${y10+height10})`,\n          `(${x10},${y10+height10})`\n        ].join(', ');\n        question = `Найдите координаты всех вершин прямоугольника с левым нижним углом (${x10}, ${y10}), шириной ${width10} и высотой ${height10}`;\n        translationKey = 'tasks.coordinates.rectangle_vertices';\n        translationParams = { x: x10, y: y10, width: width10, height: height10 };\n        answer = vertices;\n        explanation = `Вершины: (${x10},${y10}) → (+${width10},0) → (${x10+width10},${y10}) → (0,+${height10}) → (${x10+width10},${y10+height10})`;\n        explanationKey = 'tasks.coordinates.rectangle_vertices_explanation';\n        explanationParams = { x: x10, y: y10, width: width10, height: height10, result: vertices };\n        answerFormat = \"список координат через запятую\";\n        formatKey = 'answerFormats.coordinates_list';\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey, \n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}