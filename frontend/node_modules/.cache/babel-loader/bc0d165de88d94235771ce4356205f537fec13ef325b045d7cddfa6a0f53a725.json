{"ast":null,"code":"// day4-decimals.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const decimalsGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n    switch (type) {\n      case 1:\n        // Сложение десятичных\n        const a1 = (getRandomInt(10, 50) / 10).toFixed(1);\n        const b1 = (getRandomInt(10, 50) / 10).toFixed(1);\n        const sum1 = (parseFloat(a1) + parseFloat(b1)).toFixed(1);\n        question = `Сложите: ${a1} + ${b1}`;\n        translationKey = 'tasks.decimals.addition';\n        translationParams = {\n          a: a1,\n          b: b1\n        };\n        answer = sum1;\n        explanation = `${a1} + ${b1} = ${sum1}`;\n        explanationKey = 'tasks.decimals.addition_explanation';\n        explanationParams = {\n          a: a1,\n          b: b1,\n          result: sum1\n        };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n      case 2:\n        // Вычитание десятичных\n        const a2 = (getRandomInt(30, 80) / 10).toFixed(1);\n        const b2 = (getRandomInt(10, 40) / 10).toFixed(1);\n        const diff2 = (parseFloat(a2) - parseFloat(b2)).toFixed(1);\n        question = `Вычтите: ${a2} - ${b2}`;\n        translationKey = 'tasks.decimals.subtraction';\n        translationParams = {\n          a: a2,\n          b: b2\n        };\n        answer = diff2;\n        explanation = `${a2} - ${b2} = ${diff2}`;\n        explanationKey = 'tasks.decimals.subtraction_explanation';\n        explanationParams = {\n          a: a2,\n          b: b2,\n          result: diff2\n        };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n      case 3:\n        // Умножение десятичных\n        const a3 = (getRandomInt(2, 9) / 10).toFixed(1);\n        const b3 = getRandomInt(2, 8);\n        const product3 = (parseFloat(a3) * b3).toFixed(1);\n        question = `Умножьте: ${a3} × ${b3}`;\n        translationKey = 'tasks.decimals.multiplication';\n        translationParams = {\n          a: a3,\n          b: b3\n        };\n        answer = product3;\n        explanation = `${a3} × ${b3} = ${product3}`;\n        explanationKey = 'tasks.decimals.multiplication_explanation';\n        explanationParams = {\n          a: a3,\n          b: b3,\n          result: product3\n        };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n      case 4:\n        // Деление десятичных\n        const a4 = getRandomInt(15, 45);\n        const b4 = getRandomInt(2, 6);\n        const quotient4 = (a4 / b4).toFixed(1);\n        question = `Разделите: ${a4} ÷ ${b4}`;\n        translationKey = 'tasks.decimals.division';\n        translationParams = {\n          a: a4,\n          b: b4\n        };\n        answer = quotient4;\n        explanation = `${a4} ÷ ${b4} = ${quotient4}`;\n        explanationKey = 'tasks.decimals.division_explanation';\n        explanationParams = {\n          a: a4,\n          b: b4,\n          result: quotient4\n        };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n      case 5:\n        // Округление до целых\n        const decimal5 = (getRandomInt(10, 95) / 10).toFixed(1);\n        const rounded5 = Math.round(parseFloat(decimal5));\n        question = `Округлите до целых: ${decimal5}`;\n        translationKey = 'tasks.decimals.rounding';\n        translationParams = {\n          number: decimal5\n        };\n        answer = rounded5.toString();\n        explanation = `${decimal5} ≈ ${rounded5}`;\n        explanationKey = 'tasks.decimals.rounding_explanation';\n        explanationParams = {\n          number: decimal5,\n          result: rounded5\n        };\n        answerFormat = \"целое число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 6:\n        // Сравнение десятичных\n        const a6 = (getRandomInt(10, 40) / 10).toFixed(1);\n        const b6 = (getRandomInt(10, 40) / 10).toFixed(1);\n        const comparisonResult = parseFloat(a6) > parseFloat(b6) ? \"больше\" : parseFloat(a6) < parseFloat(b6) ? \"меньше\" : \"равны\";\n        question = `Сравните: ${a6} и ${b6}`;\n        translationKey = 'tasks.decimals.comparison';\n        translationParams = {\n          a: a6,\n          b: b6\n        };\n        answer = comparisonResult;\n        explanation = `${a6} ${comparisonResult} ${b6}`;\n        explanationKey = 'tasks.decimals.comparison_explanation';\n        explanationParams = {\n          a: a6,\n          b: b6,\n          result: comparisonResult\n        };\n        answerFormat = \"больше/меньше/равно\";\n        formatKey = 'answerFormats.comparison';\n        break;\n      case 7:\n        // Перевод в проценты\n        const decimal7 = (getRandomInt(1, 9) / 10).toFixed(1);\n        const percent7 = parseFloat(decimal7) * 100;\n        question = `Представьте ${decimal7} в процентах`;\n        translationKey = 'tasks.decimals.to_percentage';\n        translationParams = {\n          number: decimal7\n        };\n        answer = percent7.toString();\n        explanation = `${decimal7} = ${percent7}%`;\n        explanationKey = 'tasks.decimals.to_percentage_explanation';\n        explanationParams = {\n          number: decimal7,\n          result: percent7\n        };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n      case 8:\n        // Перевод из процентов\n        const percent8 = getRandomInt(10, 90);\n        const decimal8 = (percent8 / 100).toFixed(2);\n        question = `Представьте ${percent8}% в виде десятичной дроби`;\n        translationKey = 'tasks.decimals.from_percentage';\n        translationParams = {\n          percent: percent8\n        };\n        answer = decimal8;\n        explanation = `${percent8}% = ${decimal8}`;\n        explanationKey = 'tasks.decimals.from_percentage_explanation';\n        explanationParams = {\n          percent: percent8,\n          result: decimal8\n        };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n      case 9:\n        // Сложение с сотыми\n        const a9 = (getRandomInt(100, 500) / 100).toFixed(2);\n        const b9 = (getRandomInt(100, 500) / 100).toFixed(2);\n        const sum9 = (parseFloat(a9) + parseFloat(b9)).toFixed(2);\n        question = `Сложите: ${a9} + ${b9}`;\n        translationKey = 'tasks.decimals.addition_hundredths';\n        translationParams = {\n          a: a9,\n          b: b9\n        };\n        answer = sum9;\n        explanation = `${a9} + ${b9} = ${sum9}`;\n        explanationKey = 'tasks.decimals.addition_hundredths_explanation';\n        explanationParams = {\n          a: a9,\n          b: b9,\n          result: sum9\n        };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n      case 10:\n        // Умножение на 10, 100, 1000\n        const decimal10 = (getRandomInt(1, 50) / 10).toFixed(1);\n        const multiplier10 = [10, 100, 1000][getRandomInt(0, 2)];\n        const product10 = (parseFloat(decimal10) * multiplier10).toFixed(0);\n        question = `Умножьте: ${decimal10} × ${multiplier10}`;\n        translationKey = 'tasks.decimals.multiply_by_power';\n        translationParams = {\n          number: decimal10,\n          multiplier: multiplier10\n        };\n        answer = product10;\n        explanation = `${decimal10} × ${multiplier10} = ${product10}`;\n        explanationKey = 'tasks.decimals.multiply_by_power_explanation';\n        explanationParams = {\n          number: decimal10,\n          multiplier: multiplier10,\n          result: product10\n        };\n        answerFormat = \"целое число\";\n        formatKey = 'answerFormats.number';\n        break;\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({\n        question,\n        answer,\n        explanation,\n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey,\n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","decimalsGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","a1","toFixed","b1","sum1","parseFloat","a","b","result","a2","b2","diff2","a3","b3","product3","a4","b4","quotient4","decimal5","rounded5","round","number","toString","a6","b6","comparisonResult","decimal7","percent7","percent8","decimal8","percent","a9","b9","sum9","decimal10","multiplier10","product10","multiplier","has","add","push"],"sources":["/opt/math-app/frontend/src/taskGenerators/day4-decimals.js"],"sourcesContent":["// day4-decimals.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const decimalsGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Сложение десятичных\n        const a1 = (getRandomInt(10, 50) / 10).toFixed(1);\n        const b1 = (getRandomInt(10, 50) / 10).toFixed(1);\n        const sum1 = (parseFloat(a1) + parseFloat(b1)).toFixed(1);\n        question = `Сложите: ${a1} + ${b1}`;\n        translationKey = 'tasks.decimals.addition';\n        translationParams = { a: a1, b: b1 };\n        answer = sum1;\n        explanation = `${a1} + ${b1} = ${sum1}`;\n        explanationKey = 'tasks.decimals.addition_explanation';\n        explanationParams = { a: a1, b: b1, result: sum1 };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n\n      case 2: // Вычитание десятичных\n        const a2 = (getRandomInt(30, 80) / 10).toFixed(1);\n        const b2 = (getRandomInt(10, 40) / 10).toFixed(1);\n        const diff2 = (parseFloat(a2) - parseFloat(b2)).toFixed(1);\n        question = `Вычтите: ${a2} - ${b2}`;\n        translationKey = 'tasks.decimals.subtraction';\n        translationParams = { a: a2, b: b2 };\n        answer = diff2;\n        explanation = `${a2} - ${b2} = ${diff2}`;\n        explanationKey = 'tasks.decimals.subtraction_explanation';\n        explanationParams = { a: a2, b: b2, result: diff2 };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n\n      case 3: // Умножение десятичных\n        const a3 = (getRandomInt(2, 9) / 10).toFixed(1);\n        const b3 = getRandomInt(2, 8);\n        const product3 = (parseFloat(a3) * b3).toFixed(1);\n        question = `Умножьте: ${a3} × ${b3}`;\n        translationKey = 'tasks.decimals.multiplication';\n        translationParams = { a: a3, b: b3 };\n        answer = product3;\n        explanation = `${a3} × ${b3} = ${product3}`;\n        explanationKey = 'tasks.decimals.multiplication_explanation';\n        explanationParams = { a: a3, b: b3, result: product3 };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n\n      case 4: // Деление десятичных\n        const a4 = getRandomInt(15, 45);\n        const b4 = getRandomInt(2, 6);\n        const quotient4 = (a4 / b4).toFixed(1);\n        question = `Разделите: ${a4} ÷ ${b4}`;\n        translationKey = 'tasks.decimals.division';\n        translationParams = { a: a4, b: b4 };\n        answer = quotient4;\n        explanation = `${a4} ÷ ${b4} = ${quotient4}`;\n        explanationKey = 'tasks.decimals.division_explanation';\n        explanationParams = { a: a4, b: b4, result: quotient4 };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n\n      case 5: // Округление до целых\n        const decimal5 = (getRandomInt(10, 95) / 10).toFixed(1);\n        const rounded5 = Math.round(parseFloat(decimal5));\n        question = `Округлите до целых: ${decimal5}`;\n        translationKey = 'tasks.decimals.rounding';\n        translationParams = { number: decimal5 };\n        answer = rounded5.toString();\n        explanation = `${decimal5} ≈ ${rounded5}`;\n        explanationKey = 'tasks.decimals.rounding_explanation';\n        explanationParams = { number: decimal5, result: rounded5 };\n        answerFormat = \"целое число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 6: // Сравнение десятичных\n        const a6 = (getRandomInt(10, 40) / 10).toFixed(1);\n        const b6 = (getRandomInt(10, 40) / 10).toFixed(1);\n        const comparisonResult = parseFloat(a6) > parseFloat(b6) ? \"больше\" : parseFloat(a6) < parseFloat(b6) ? \"меньше\" : \"равны\";\n        question = `Сравните: ${a6} и ${b6}`;\n        translationKey = 'tasks.decimals.comparison';\n        translationParams = { a: a6, b: b6 };\n        answer = comparisonResult;\n        explanation = `${a6} ${comparisonResult} ${b6}`;\n        explanationKey = 'tasks.decimals.comparison_explanation';\n        explanationParams = { a: a6, b: b6, result: comparisonResult };\n        answerFormat = \"больше/меньше/равно\";\n        formatKey = 'answerFormats.comparison';\n        break;\n\n      case 7: // Перевод в проценты\n        const decimal7 = (getRandomInt(1, 9) / 10).toFixed(1);\n        const percent7 = parseFloat(decimal7) * 100;\n        question = `Представьте ${decimal7} в процентах`;\n        translationKey = 'tasks.decimals.to_percentage';\n        translationParams = { number: decimal7 };\n        answer = percent7.toString();\n        explanation = `${decimal7} = ${percent7}%`;\n        explanationKey = 'tasks.decimals.to_percentage_explanation';\n        explanationParams = { number: decimal7, result: percent7 };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n\n      case 8: // Перевод из процентов\n        const percent8 = getRandomInt(10, 90);\n        const decimal8 = (percent8 / 100).toFixed(2);\n        question = `Представьте ${percent8}% в виде десятичной дроби`;\n        translationKey = 'tasks.decimals.from_percentage';\n        translationParams = { percent: percent8 };\n        answer = decimal8;\n        explanation = `${percent8}% = ${decimal8}`;\n        explanationKey = 'tasks.decimals.from_percentage_explanation';\n        explanationParams = { percent: percent8, result: decimal8 };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n\n      case 9: // Сложение с сотыми\n        const a9 = (getRandomInt(100, 500) / 100).toFixed(2);\n        const b9 = (getRandomInt(100, 500) / 100).toFixed(2);\n        const sum9 = (parseFloat(a9) + parseFloat(b9)).toFixed(2);\n        question = `Сложите: ${a9} + ${b9}`;\n        translationKey = 'tasks.decimals.addition_hundredths';\n        translationParams = { a: a9, b: b9 };\n        answer = sum9;\n        explanation = `${a9} + ${b9} = ${sum9}`;\n        explanationKey = 'tasks.decimals.addition_hundredths_explanation';\n        explanationParams = { a: a9, b: b9, result: sum9 };\n        answerFormat = \"десятичная дробь\";\n        formatKey = 'answerFormats.decimal';\n        break;\n\n      case 10: // Умножение на 10, 100, 1000\n        const decimal10 = (getRandomInt(1, 50) / 10).toFixed(1);\n        const multiplier10 = [10, 100, 1000][getRandomInt(0, 2)];\n        const product10 = (parseFloat(decimal10) * multiplier10).toFixed(0);\n        question = `Умножьте: ${decimal10} × ${multiplier10}`;\n        translationKey = 'tasks.decimals.multiply_by_power';\n        translationParams = { number: decimal10, multiplier: multiplier10 };\n        answer = product10;\n        explanation = `${decimal10} × ${multiplier10} = ${product10}`;\n        explanationKey = 'tasks.decimals.multiply_by_power_explanation';\n        explanationParams = { number: decimal10, multiplier: multiplier10, result: product10 };\n        answerFormat = \"целое число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey, \n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}