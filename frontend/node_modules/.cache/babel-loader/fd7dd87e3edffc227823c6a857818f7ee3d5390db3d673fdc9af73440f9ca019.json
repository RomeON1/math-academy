{"ast":null,"code":"// day11-statistics.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const statisticsGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n    switch (type) {\n      case 1:\n        // Среднее арифметическое\n        const numbers1 = Array.from({\n          length: 5\n        }, () => getRandomInt(10, 20));\n        const sum1 = numbers1.reduce((a, b) => a + b, 0);\n        const average1 = Math.round(sum1 / numbers1.length);\n        question = `Найдите среднее арифметическое чисел: ${numbers1.join(', ')}`;\n        translationKey = 'tasks.statistics.average';\n        translationParams = {\n          numbers: numbers1.join(', ')\n        };\n        answer = average1.toString();\n        explanation = `Сумма = ${numbers1.join(' + ')} = ${sum1}, среднее = ${sum1} / ${numbers1.length} = ${average1}`;\n        explanationKey = 'tasks.statistics.average_explanation';\n        explanationParams = {\n          numbers: numbers1.join(' + '),\n          sum: sum1,\n          count: numbers1.length,\n          result: average1\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      // Вместо задачи с диаграммой:\n      case 11:\n        // Конкретная диаграмма\n        const subjects = ['Математика', 'Русский язык', 'История', 'Биология', 'Физкультура'];\n        const percentages = [25, 20, 15, 18, 22];\n        const maxIndex = percentages.indexOf(Math.max(...percentages));\n        question = `По диаграмме: Математика 25%, Русский язык 20%, История 15%, Биология 18%, Физкультура 22%. Какой предмет самый популярный?`;\n        translationKey = 'tasks.statistics.read_chart_fixed';\n        answer = subjects[maxIndex];\n        explanation = `Самый высокий процент (25%) у Математики`;\n        answerFormat = \"название предмета\";\n        break;\n      case 2:\n        // Медиана\n        const numbers2 = Array.from({\n          length: 5\n        }, () => getRandomInt(10, 30)).sort((a, b) => a - b);\n        const median2 = numbers2[2];\n        question = `Найдите медиану чисел: ${numbers2.join(', ')}`;\n        translationKey = 'tasks.statistics.median';\n        translationParams = {\n          numbers: numbers2.join(', ')\n        };\n        answer = median2.toString();\n        explanation = `Упорядоченный ряд: ${numbers2.join(', ')}, медиана (3е число) = ${median2}`;\n        explanationKey = 'tasks.statistics.median_explanation';\n        explanationParams = {\n          numbers: numbers2.join(', '),\n          result: median2\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 3:\n        // Мода\n        const numbers3 = [12, 15, 12, 18, 15, 12, 20];\n        const mode3 = 12;\n        question = `Найдите моду чисел: ${numbers3.join(', ')}`;\n        translationKey = 'tasks.statistics.mode';\n        translationParams = {\n          numbers: numbers3.join(', ')\n        };\n        answer = mode3.toString();\n        explanation = `Число 12 встречается 3 раза (чаще других) → мода = ${mode3}`;\n        explanationKey = 'tasks.statistics.mode_explanation';\n        explanationParams = {\n          numbers: numbers3.join(', '),\n          result: mode3\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 4:\n        // Размах ряда\n        const numbers4 = Array.from({\n          length: 6\n        }, () => getRandomInt(15, 40)).sort((a, b) => a - b);\n        const min4 = numbers4[0];\n        const max4 = numbers4[numbers4.length - 1];\n        const range4 = max4 - min4;\n        question = `Найдите размах чисел: ${numbers4.join(', ')}`;\n        translationKey = 'tasks.statistics.range';\n        translationParams = {\n          numbers: numbers4.join(', ')\n        };\n        answer = range4.toString();\n        explanation = `Минимум = ${min4}, максимум = ${max4}, размах = ${max4} - ${min4} = ${range4}`;\n        explanationKey = 'tasks.statistics.range_explanation';\n        explanationParams = {\n          min: min4,\n          max: max4,\n          result: range4\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 5:\n        // Вероятность\n        const favorable5 = getRandomInt(2, 5);\n        const total5 = getRandomInt(8, 12);\n        const probability5 = `${favorable5}/${total5}`;\n        question = `В корзине ${total5} шаров, ${favorable5} красных. Найдите вероятность вытащить красный шар`;\n        translationKey = 'tasks.statistics.probability';\n        translationParams = {\n          favorable: favorable5,\n          total: total5\n        };\n        answer = probability5;\n        explanation = `Вероятность = благоприятные / все = ${favorable5} / ${total5} = ${probability5}`;\n        explanationKey = 'tasks.statistics.probability_explanation';\n        explanationParams = {\n          favorable: favorable5,\n          total: total5,\n          result: probability5\n        };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n      case 6:\n        // Процент от общего\n        const part6 = getRandomInt(3, 8);\n        const whole6 = getRandomInt(20, 30);\n        const percentage6 = Math.round(part6 / whole6 * 100);\n        question = `В классе ${whole6} учеников, ${part6} отличников. Найдите процент отличников`;\n        translationKey = 'tasks.statistics.percentage';\n        translationParams = {\n          part: part6,\n          whole: whole6\n        };\n        answer = percentage6.toString();\n        explanation = `Процент = (${part6} / ${whole6}) × 100 = ${percentage6}%`;\n        explanationKey = 'tasks.statistics.percentage_explanation';\n        explanationParams = {\n          part: part6,\n          whole: whole6,\n          result: percentage6\n        };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n      case 7:\n        // Частота\n        const value7 = getRandomInt(5, 10);\n        const total7 = getRandomInt(25, 40);\n        const frequency7 = Math.round(value7 / total7 * 100);\n        question = `Событие произошло ${value7} раз из ${total7}. Найдите частоту`;\n        translationKey = 'tasks.statistics.frequency';\n        translationParams = {\n          value: value7,\n          total: total7\n        };\n        answer = frequency7.toString();\n        explanation = `Частота = (${value7} / ${total7}) × 100 = ${frequency7}%`;\n        explanationKey = 'tasks.statistics.frequency_explanation';\n        explanationParams = {\n          value: value7,\n          total: total7,\n          result: frequency7\n        };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n      case 8:\n        // Диаграмма (чтение)\n        const values8 = [30, 25, 20, 15, 10];\n        const subjects8 = [\"Математика\", \"Русский\", \"История\", \"Биология\", \"Физкультура\"];\n        const maxIndex8 = values8.indexOf(Math.max(...values8));\n        const maxSubject = subjects8[maxIndex8];\n        const maxValue = values8[maxIndex8];\n        question = `По диаграмме: Математика ${values8[0]}%, Русский ${values8[1]}%, История ${values8[2]}%, Биология ${values8[3]}%, Физкультура ${values8[4]}%`;\n        translationKey = 'tasks.statistics.read_chart';\n        translationParams = {\n          values: values8.map((v, i) => `${subjects8[i]} ${v}%`).join(', ')\n        };\n        answer = maxSubject;\n        explanation = `Самый высокий процент у ${maxSubject} - ${maxValue}%`;\n        explanationKey = 'tasks.statistics.read_chart_explanation';\n        explanationParams = {\n          subject: maxSubject,\n          value: maxValue\n        };\n        answerFormat = \"название предмета\";\n        formatKey = 'answerFormats.subject';\n        break;\n      case 9:\n        // Прогноз\n        const current9 = getRandomInt(100, 200);\n        const growth9 = getRandomInt(10, 30);\n        const forecast9 = Math.round(current9 * (1 + growth9 / 100));\n        question = `Сейчас ${current9} единиц, рост ${growth9}% в год. Каким будет значение через год?`;\n        translationKey = 'tasks.statistics.forecast';\n        translationParams = {\n          current: current9,\n          growth: growth9\n        };\n        answer = forecast9.toString();\n        explanation = `Через год = ${current9} + ${growth9}% = ${current9} × 1.${growth9} = ${forecast9}`;\n        explanationKey = 'tasks.statistics.forecast_explanation';\n        explanationParams = {\n          current: current9,\n          growth: growth9,\n          result: forecast9\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 10:\n        // Сравнение средних\n        const groupA10 = Array.from({\n          length: 4\n        }, () => getRandomInt(15, 25));\n        const groupB10 = Array.from({\n          length: 4\n        }, () => getRandomInt(18, 28));\n        const avgA10 = Math.round(groupA10.reduce((a, b) => a + b, 0) / groupA10.length);\n        const avgB10 = Math.round(groupB10.reduce((a, b) => a + b, 0) / groupB10.length);\n        const comparisonResult = avgA10 > avgB10 ? \"A > B\" : avgA10 < avgB10 ? \"A < B\" : \"A = B\";\n        question = `Сравните средние: Группа A: ${groupA10.join(', ')}, Группа B: ${groupB10.join(', ')}`;\n        translationKey = 'tasks.statistics.compare_averages';\n        translationParams = {\n          groupA: groupA10.join(', '),\n          groupB: groupB10.join(', ')\n        };\n        answer = comparisonResult;\n        explanation = `Среднее A = ${avgA10}, среднее B = ${avgB10} → ${comparisonResult}`;\n        explanationKey = 'tasks.statistics.compare_averages_explanation';\n        explanationParams = {\n          avgA: avgA10,\n          avgB: avgB10,\n          result: comparisonResult\n        };\n        answerFormat = \"больше/меньше/равно\";\n        formatKey = 'answerFormats.comparison';\n        break;\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({\n        question,\n        answer,\n        explanation,\n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey,\n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","statisticsGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","numbers1","Array","from","sum1","reduce","a","b","average1","round","join","numbers","toString","sum","result","subjects","percentages","maxIndex","indexOf","numbers2","sort","median2","numbers3","mode3","numbers4","min4","max4","range4","favorable5","total5","probability5","favorable","total","part6","whole6","percentage6","part","whole","value7","total7","frequency7","value","values8","subjects8","maxIndex8","maxSubject","maxValue","values","map","v","i","subject","current9","growth9","forecast9","current","growth","groupA10","groupB10","avgA10","avgB10","comparisonResult","groupA","groupB","avgA","avgB","has","add","push"],"sources":["/opt/math-app/frontend/src/taskGenerators/day11-statistics.js"],"sourcesContent":["// day11-statistics.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const statisticsGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Среднее арифметическое\n        const numbers1 = Array.from({length: 5}, () => getRandomInt(10, 20));\n        const sum1 = numbers1.reduce((a, b) => a + b, 0);\n        const average1 = Math.round(sum1 / numbers1.length);\n        question = `Найдите среднее арифметическое чисел: ${numbers1.join(', ')}`;\n        translationKey = 'tasks.statistics.average';\n        translationParams = { numbers: numbers1.join(', ') };\n        answer = average1.toString();\n        explanation = `Сумма = ${numbers1.join(' + ')} = ${sum1}, среднее = ${sum1} / ${numbers1.length} = ${average1}`;\n        explanationKey = 'tasks.statistics.average_explanation';\n        explanationParams = { numbers: numbers1.join(' + '), sum: sum1, count: numbers1.length, result: average1 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      // Вместо задачи с диаграммой:\n      case 11: // Конкретная диаграмма\n        const subjects = ['Математика', 'Русский язык', 'История', 'Биология', 'Физкультура'];\n        const percentages = [25, 20, 15, 18, 22];\n        const maxIndex = percentages.indexOf(Math.max(...percentages));\n        question = `По диаграмме: Математика 25%, Русский язык 20%, История 15%, Биология 18%, Физкультура 22%. Какой предмет самый популярный?`;\n        translationKey = 'tasks.statistics.read_chart_fixed';\n        answer = subjects[maxIndex];\n        explanation = `Самый высокий процент (25%) у Математики`;\n        answerFormat = \"название предмета\";\n        break;\n\n      case 2: // Медиана\n        const numbers2 = Array.from({length: 5}, () => getRandomInt(10, 30)).sort((a, b) => a - b);\n        const median2 = numbers2[2];\n        question = `Найдите медиану чисел: ${numbers2.join(', ')}`;\n        translationKey = 'tasks.statistics.median';\n        translationParams = { numbers: numbers2.join(', ') };\n        answer = median2.toString();\n        explanation = `Упорядоченный ряд: ${numbers2.join(', ')}, медиана (3е число) = ${median2}`;\n        explanationKey = 'tasks.statistics.median_explanation';\n        explanationParams = { numbers: numbers2.join(', '), result: median2 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 3: // Мода\n        const numbers3 = [12, 15, 12, 18, 15, 12, 20];\n        const mode3 = 12;\n        question = `Найдите моду чисел: ${numbers3.join(', ')}`;\n        translationKey = 'tasks.statistics.mode';\n        translationParams = { numbers: numbers3.join(', ') };\n        answer = mode3.toString();\n        explanation = `Число 12 встречается 3 раза (чаще других) → мода = ${mode3}`;\n        explanationKey = 'tasks.statistics.mode_explanation';\n        explanationParams = { numbers: numbers3.join(', '), result: mode3 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 4: // Размах ряда\n        const numbers4 = Array.from({length: 6}, () => getRandomInt(15, 40)).sort((a, b) => a - b);\n        const min4 = numbers4[0];\n        const max4 = numbers4[numbers4.length - 1];\n        const range4 = max4 - min4;\n        question = `Найдите размах чисел: ${numbers4.join(', ')}`;\n        translationKey = 'tasks.statistics.range';\n        translationParams = { numbers: numbers4.join(', ') };\n        answer = range4.toString();\n        explanation = `Минимум = ${min4}, максимум = ${max4}, размах = ${max4} - ${min4} = ${range4}`;\n        explanationKey = 'tasks.statistics.range_explanation';\n        explanationParams = { min: min4, max: max4, result: range4 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 5: // Вероятность\n        const favorable5 = getRandomInt(2, 5);\n        const total5 = getRandomInt(8, 12);\n        const probability5 = `${favorable5}/${total5}`;\n        question = `В корзине ${total5} шаров, ${favorable5} красных. Найдите вероятность вытащить красный шар`;\n        translationKey = 'tasks.statistics.probability';\n        translationParams = { favorable: favorable5, total: total5 };\n        answer = probability5;\n        explanation = `Вероятность = благоприятные / все = ${favorable5} / ${total5} = ${probability5}`;\n        explanationKey = 'tasks.statistics.probability_explanation';\n        explanationParams = { favorable: favorable5, total: total5, result: probability5 };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n\n      case 6: // Процент от общего\n        const part6 = getRandomInt(3, 8);\n        const whole6 = getRandomInt(20, 30);\n        const percentage6 = Math.round((part6 / whole6) * 100);\n        question = `В классе ${whole6} учеников, ${part6} отличников. Найдите процент отличников`;\n        translationKey = 'tasks.statistics.percentage';\n        translationParams = { part: part6, whole: whole6 };\n        answer = percentage6.toString();\n        explanation = `Процент = (${part6} / ${whole6}) × 100 = ${percentage6}%`;\n        explanationKey = 'tasks.statistics.percentage_explanation';\n        explanationParams = { part: part6, whole: whole6, result: percentage6 };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n\n      case 7: // Частота\n        const value7 = getRandomInt(5, 10);\n        const total7 = getRandomInt(25, 40);\n        const frequency7 = Math.round((value7 / total7) * 100);\n        question = `Событие произошло ${value7} раз из ${total7}. Найдите частоту`;\n        translationKey = 'tasks.statistics.frequency';\n        translationParams = { value: value7, total: total7 };\n        answer = frequency7.toString();\n        explanation = `Частота = (${value7} / ${total7}) × 100 = ${frequency7}%`;\n        explanationKey = 'tasks.statistics.frequency_explanation';\n        explanationParams = { value: value7, total: total7, result: frequency7 };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n\n      case 8: // Диаграмма (чтение)\n        const values8 = [30, 25, 20, 15, 10];\n        const subjects8 = [\"Математика\", \"Русский\", \"История\", \"Биология\", \"Физкультура\"];\n        const maxIndex8 = values8.indexOf(Math.max(...values8));\n        const maxSubject = subjects8[maxIndex8];\n        const maxValue = values8[maxIndex8];\n        question = `По диаграмме: Математика ${values8[0]}%, Русский ${values8[1]}%, История ${values8[2]}%, Биология ${values8[3]}%, Физкультура ${values8[4]}%`;\n        translationKey = 'tasks.statistics.read_chart';\n        translationParams = { \n          values: values8.map((v, i) => `${subjects8[i]} ${v}%`).join(', ')\n        };\n        answer = maxSubject;\n        explanation = `Самый высокий процент у ${maxSubject} - ${maxValue}%`;\n        explanationKey = 'tasks.statistics.read_chart_explanation';\n        explanationParams = { subject: maxSubject, value: maxValue };\n        answerFormat = \"название предмета\";\n        formatKey = 'answerFormats.subject';\n        break;\n\n      case 9: // Прогноз\n        const current9 = getRandomInt(100, 200);\n        const growth9 = getRandomInt(10, 30);\n        const forecast9 = Math.round(current9 * (1 + growth9 / 100));\n        question = `Сейчас ${current9} единиц, рост ${growth9}% в год. Каким будет значение через год?`;\n        translationKey = 'tasks.statistics.forecast';\n        translationParams = { current: current9, growth: growth9 };\n        answer = forecast9.toString();\n        explanation = `Через год = ${current9} + ${growth9}% = ${current9} × 1.${growth9} = ${forecast9}`;\n        explanationKey = 'tasks.statistics.forecast_explanation';\n        explanationParams = { current: current9, growth: growth9, result: forecast9 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 10: // Сравнение средних\n        const groupA10 = Array.from({length: 4}, () => getRandomInt(15, 25));\n        const groupB10 = Array.from({length: 4}, () => getRandomInt(18, 28));\n        const avgA10 = Math.round(groupA10.reduce((a, b) => a + b, 0) / groupA10.length);\n        const avgB10 = Math.round(groupB10.reduce((a, b) => a + b, 0) / groupB10.length);\n        const comparisonResult = avgA10 > avgB10 ? \"A > B\" : avgA10 < avgB10 ? \"A < B\" : \"A = B\";\n        question = `Сравните средние: Группа A: ${groupA10.join(', ')}, Группа B: ${groupB10.join(', ')}`;\n        translationKey = 'tasks.statistics.compare_averages';\n        translationParams = { groupA: groupA10.join(', '), groupB: groupB10.join(', ') };\n        answer = comparisonResult;\n        explanation = `Среднее A = ${avgA10}, среднее B = ${avgB10} → ${comparisonResult}`;\n        explanationKey = 'tasks.statistics.compare_averages_explanation';\n        explanationParams = { avgA: avgA10, avgB: avgB10, result: comparisonResult };\n        answerFormat = \"больше/меньше/равно\";\n        formatKey = 'answerFormats.comparison';\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey, \n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}