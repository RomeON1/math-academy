{"ast":null,"code":"// day14-review.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const reviewGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n    switch (type) {\n      case 1:\n        // Дроби - сокращение\n        const num1 = getRandomInt(2, 8);\n        const den1 = getRandomInt(3, 12);\n        question = `Сократите дробь: ${num1 * 2}/${den1 * 2}`;\n        translationKey = 'tasks.review.fractions';\n        translationParams = {\n          num: num1 * 2,\n          den: den1 * 2\n        };\n        answer = `${num1}/${den1}`;\n        explanation = `Делим на 2: ${num1 * 2}/${den1 * 2} = ${num1}/${den1}`;\n        explanationKey = 'tasks.review.fractions_explanation';\n        explanationParams = {\n          num: num1 * 2,\n          den: den1 * 2,\n          result: `${num1}/${den1}`\n        };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n      case 2:\n        // Геометрия - площадь квадрата\n        const side2 = getRandomInt(3, 12);\n        const area2 = side2 * side2;\n        question = `Найдите площадь квадрата со стороной ${side2} см`;\n        translationKey = 'tasks.review.geometry';\n        translationParams = {\n          side: side2\n        };\n        answer = area2.toString();\n        explanation = `Площадь = ${side2} × ${side2} = ${area2} см²`;\n        explanationKey = 'tasks.review.geometry_explanation';\n        explanationParams = {\n          side: side2,\n          result: area2\n        };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answer极formats.cm2';\n        break;\n      case 3:\n        // Уравнения\n        const a3 = getRandomInt(2, 6);\n        const b3 = getRandomInt(5, 20);\n        const c3 = getRandomInt(25, 50);\n        const result3 = Math.round((c3 - b3) / a3);\n        question = `Решите уравнение: ${a3}x + ${b3} = ${c3}`;\n        translationKey = 'tasks.review.equations';\n        translationParams = {\n          a: a3,\n          b: b3,\n          c: c3\n        };\n        answer = result3.toString();\n        explanation = `${a3}x = ${c3} - ${b3} = ${c3 - b3}, x = ${result3}`;\n        explanationKey = 'tasks.review.equations_explanation';\n        explanationParams = {\n          a: a3,\n          b: b3,\n          c: c3,\n          step: c3 - b3,\n          result: result3\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 4:\n        // Проценты\n        const percent4 = getRandomInt(5, 25) * 5;\n        const number4 = getRandomInt(100, 500);\n        const result4 = Math.round(percent4 / 100 * number4);\n        question = `Найдите ${percent4}% от числа ${number4}`;\n        translationKey = 'tasks.review.percentages';\n        translationParams = {\n          percent: percent4,\n          number: number4\n        };\n        answer = result4.toString();\n        explanation = `${percent4}% от ${number4} = (${percent4} × ${number4}) / 100 = ${result4}`;\n        explanationKey = 'tasks.review.percentages_explanation';\n        explanationParams = {\n          percent: percent4,\n          number: number4,\n          result: result4\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 5:\n        // Отношения\n        const a5 = getRandomInt(2, 8);\n        const b5 = getRandomInt(2, 8);\n        question = `Запишите отношение ${a5} к ${b5}`;\n        translationKey = 'tasks.review.ratios';\n        translationParams = {\n          a: a5,\n          b: b5\n        };\n        answer = `${a5}:${b5}`;\n        explanation = `Отношение = ${a5}:${b5}`;\n        explanationKey = 'tasks.review.ratios_explanation';\n        explanationParams = {\n          a: a5,\n          b: b5\n        };\n        answerFormat = \"отношение (a:b)\";\n        formatKey = 'answerFormats.ratio';\n        break;\n      case 6:\n        // Координаты - симметрия\n        const x6 = getRandomInt(-4, 4);\n        const y6 = getRandomInt(-4, 4);\n        const symmetricPoint6 = `(${-x6}, ${y6})`;\n        question = `Найдите точку, симметричную (${x6}, ${y6}) относительно оси Y`;\n        translationKey = 'tasks.review.coordinates';\n        translationParams = {\n          x: x6,\n          y: y6\n        };\n        answer = symmetricPoint6;\n        explanation = `Симметрия относительно Y: x меняет знак → ${symmetricPoint6}`;\n        explanationKey = 'tasks.review.coordinates_explanation';\n        explanationParams = {\n          x: x6,\n          y: y6,\n          result: symmetricPoint6\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 7:\n        // Объем куба\n        const edge7 = getRandomInt(2, 8);\n        const volume7 = edge7 * edge7 * edge7;\n        question = `Найдите объем куба с ребром ${edge7} см`;\n        translationKey = 'tasks.review.volume';\n        translationParams = {\n          edge: edge7\n        };\n        answer = volume7.toString();\n        explanation = `Объем = ${edge7} × ${edge7} × ${edge7} = ${volume7} см³`;\n        explanationKey = 'tasks.review.volume_explanation';\n        explanationParams = {\n          edge: edge7,\n          result: volume7\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      case 8:\n        // Статистика - среднее\n        const numbers8 = Array.from({\n          length: 5\n        }, () => getRandomInt(10, 20));\n        const sum8 = numbers8.reduce((a, b) => a + b, 0);\n        const average8 = Math.round(sum8 / numbers8.length);\n        question = `Найдите среднее арифметическое чисел: ${numbers8.join(', ')}`;\n        translationKey = 'tasks.review.statistics';\n        translationParams = {\n          numbers: numbers8.join(', ')\n        };\n        answer = average8.toString();\n        explanation = `Сумма = ${numbers8.join(' + ')} = ${sum8}, среднее = ${sum8} / ${numbers8.length} = ${average8}`;\n        explanationKey = 'tasks.review.statistics_explanation';\n        explanationParams = {\n          numbers: numbers8.join(' + '),\n          sum: sum8,\n          count: numbers8.length,\n          result: average8\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 9:\n        // Текстовая задача\n        const price9 = getRandomInt(50, 150);\n        const quantity9 = getRandomInt(3, 8);\n        const totalCost9 = price9 * quantity9;\n        question = `Одна тетрадь стоит ${price9} руб. Сколько стоят ${quantity9} тетрадей?`;\n        translationKey = 'tasks.review.word_problem';\n        translationParams = {\n          price: price9,\n          quantity: quantity9\n        };\n        answer = totalCost9.toString();\n        explanation = `Стоимость = цена × количество = ${price9} × ${quantity9} = ${totalCost9} руб`;\n        explanationKey = 'tasks.review.word_problem_explanation';\n        explanationParams = {\n          price: price9,\n          quantity: quantity9,\n          result: totalCost9\n        };\n        answerFormat = \"число (руб.)\";\n        formatKey = 'answerFormats.rub';\n        break;\n      case 10:\n        // Симметрия\n        const letter10 = \"H\";\n        question = `Какая симметрия у буквы \"${letter10}\"?`;\n        translationKey = 'tasks.review.symmetry';\n        translationParams = {\n          letter: letter10\n        };\n        answer = \"вертикальная и горизонтальная\";\n        explanation = `Буква \"${letter10}\" имеет вертикальную и горизонтальную симметрию`;\n        explanationKey = 'tasks.review.symmetry_explanation';\n        explanationParams = {\n          letter: letter10,\n          result: \"вертикальная и горизонтальная\"\n        };\n        answerFormat = \"тип симметрии\";\n        formatKey = 'answerFormats.symmetry_type';\n        break;\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    // Fallback: если translationKey не определен, используем обычный текст\n    if (!translationKey) {\n      translationKey = null;\n    }\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({\n        question,\n        answer,\n        explanation,\n        answerFormat,\n        translationKey: translationKey || undefined,\n        translationParams: translationParams || undefined,\n        explanationKey: explanationKey || undefined,\n        explanationParams: explanationParams || undefined,\n        formatKey: formatKey || undefined\n      });\n    }\n  }\n  return tasks;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","reviewGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","num1","den1","num","den","result","side2","area2","side","toString","a3","b3","c3","result3","round","a","b","c","step","percent4","number4","result4","percent","number","a5","b5","x6","y6","symmetricPoint6","x","y","edge7","volume7","edge","numbers8","Array","from","sum8","reduce","average8","join","numbers","sum","price9","quantity9","totalCost9","price","quantity","letter10","letter","has","add","push","undefined"],"sources":["/opt/math-app/frontend/src/taskGenerators/day14-review.js"],"sourcesContent":["// day14-review.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const reviewGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Дроби - сокращение\n        const num1 = getRandomInt(2, 8);\n        const den1 = getRandomInt(3, 12);\n        question = `Сократите дробь: ${num1 * 2}/${den1 * 2}`;\n        translationKey = 'tasks.review.fractions';\n        translationParams = { num: num1 * 2, den: den1 * 2 };\n        answer = `${num1}/${den1}`;\n        explanation = `Делим на 2: ${num1 * 2}/${den1 * 2} = ${num1}/${den1}`;\n        explanationKey = 'tasks.review.fractions_explanation';\n        explanationParams = { num: num1 * 2, den: den1 * 2, result: `${num1}/${den1}` };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n\n      case 2: // Геометрия - площадь квадрата\n        const side2 = getRandomInt(3, 12);\n        const area2 = side2 * side2;\n        question = `Найдите площадь квадрата со стороной ${side2} см`;\n        translationKey = 'tasks.review.geometry';\n        translationParams = { side: side2 };\n        answer = area2.toString();\n        explanation = `Площадь = ${side2} × ${side2} = ${area2} см²`;\n        explanationKey = 'tasks.review.geometry_explanation';\n        explanationParams = { side: side2, result: area2 };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answer极formats.cm2';\n        break;\n\n      case 3: // Уравнения\n        const a3 = getRandomInt(2, 6);\n        const b3 = getRandomInt(5, 20);\n        const c3 = getRandomInt(25, 50);\n        const result3 = Math.round((c3 - b3) / a3);\n        question = `Решите уравнение: ${a3}x + ${b3} = ${c3}`;\n        translationKey = 'tasks.review.equations';\n        translationParams = { a: a3, b: b3, c: c3 };\n        answer = result3.toString();\n        explanation = `${a3}x = ${c3} - ${b3} = ${c3 - b3}, x = ${result3}`;\n        explanationKey = 'tasks.review.equations_explanation';\n        explanationParams = { a: a3, b: b3, c: c3, step: c3 - b3, result: result3 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 4: // Проценты\n        const percent4 = getRandomInt(5, 25) * 5;\n        const number4 = getRandomInt(100, 500);\n        const result4 = Math.round((percent4 / 100) * number4);\n        question = `Найдите ${percent4}% от числа ${number4}`;\n        translationKey = 'tasks.review.percentages';\n        translationParams = { percent: percent4, number: number4 };\n        answer = result4.toString();\n        explanation = `${percent4}% от ${number4} = (${percent4} × ${number4}) / 100 = ${result4}`;\n        explanationKey = 'tasks.review.percentages_explanation';\n        explanationParams = { percent: percent4, number: number4, result: result4 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 5: // Отношения\n        const a5 = getRandomInt(2, 8);\n        const b5 = getRandomInt(2, 8);\n        question = `Запишите отношение ${a5} к ${b5}`;\n        translationKey = 'tasks.review.ratios';\n        translationParams = { a: a5, b: b5 };\n        answer = `${a5}:${b5}`;\n        explanation = `Отношение = ${a5}:${b5}`;\n        explanationKey = 'tasks.review.ratios_explanation';\n        explanationParams = { a: a5, b: b5 };\n        answerFormat = \"отношение (a:b)\";\n        formatKey = 'answerFormats.ratio';\n        break;\n\n      case 6: // Координаты - симметрия\n        const x6 = getRandomInt(-4, 4);\n        const y6 = getRandomInt(-4, 4);\n        const symmetricPoint6 = `(${-x6}, ${y6})`;\n        question = `Найдите точку, симметричную (${x6}, ${y6}) относительно оси Y`;\n        translationKey = 'tasks.review.coordinates';\n        translationParams = { x: x6, y: y6 };\n        answer = symmetricPoint6;\n        explanation = `Симметрия относительно Y: x меняет знак → ${symmetricPoint6}`;\n        explanationKey = 'tasks.review.coordinates_explanation';\n        explanationParams = { x: x6, y: y6, result: symmetricPoint6 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 7: // Объем куба\n        const edge7 = getRandomInt(2, 8);\n        const volume7 = edge7 * edge7 * edge7;\n        question = `Найдите объем куба с ребром ${edge7} см`;\n        translationKey = 'tasks.review.volume';\n        translationParams = { edge: edge7 };\n        answer = volume7.toString();\n        explanation = `Объем = ${edge7} × ${edge7} × ${edge7} = ${volume7} см³`;\n        explanationKey = 'tasks.review.volume_explanation';\n        explanationParams = { edge: edge7, result: volume7 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      case 8: // Статистика - среднее\n        const numbers8 = Array.from({length: 5}, () => getRandomInt(10, 20));\n        const sum8 = numbers8.reduce((a, b) => a + b, 0);\n        const average8 = Math.round(sum8 / numbers8.length);\n        question = `Найдите среднее арифметическое чисел: ${numbers8.join(', ')}`;\n        translationKey = 'tasks.review.statistics';\n        translationParams = { numbers: numbers8.join(', ') };\n        answer = average8.toString();\n        explanation = `Сумма = ${numbers8.join(' + ')} = ${sum8}, среднее = ${sum8} / ${numbers8.length} = ${average8}`;\n        explanationKey = 'tasks.review.statistics_explanation';\n        explanationParams = { numbers: numbers8.join(' + '), sum: sum8, count: numbers8.length, result: average8 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 9: // Текстовая задача\n        const price9 = getRandomInt(50, 150);\n        const quantity9 = getRandomInt(3, 8);\n        const totalCost9 = price9 * quantity9;\n        question = `Одна тетрадь стоит ${price9} руб. Сколько стоят ${quantity9} тетрадей?`;\n        translationKey = 'tasks.review.word_problem';\n        translationParams = { price: price9, quantity: quantity9 };\n        answer = totalCost9.toString();\n        explanation = `Стоимость = цена × количество = ${price9} × ${quantity9} = ${totalCost9} руб`;\n        explanationKey = 'tasks.review.word_problem_explanation';\n        explanationParams = { price: price9, quantity: quantity9, result: totalCost9 };\n        answerFormat = \"число (руб.)\";\n        formatKey = 'answerFormats.rub';\n        break;\n\n      case 10: // Симметрия\n        const letter10 = \"H\";\n        question = `Какая симметрия у буквы \"${letter10}\"?`;\n        translationKey = 'tasks.review.symmetry';\n        translationParams = { letter: letter10 };\n        answer = \"вертикальная и горизонтальная\";\n        explanation = `Буква \"${letter10}\" имеет вертикальную и горизонтальную симметрию`;\n        explanationKey = 'tasks.review.symmetry_explanation';\n        explanationParams = { letter: letter10, result: \"вертикальная и горизонтальная\" };\n        answerFormat = \"тип симметрии\";\n        formatKey = 'answerFormats.symmetry_type';\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    // Fallback: если translationKey не определен, используем обычный текст\n    if (!translationKey) {\n      translationKey = null;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey: translationKey || undefined,\n        translationParams: translationParams || undefined,\n        explanationKey: explanationKey || undefined, \n        explanationParams: explanationParams || undefined,\n        formatKey: formatKey || undefined\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}