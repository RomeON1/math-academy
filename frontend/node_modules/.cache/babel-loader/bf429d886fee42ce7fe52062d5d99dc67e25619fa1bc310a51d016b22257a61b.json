{"ast":null,"code":"// day8-percentages.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const percentagesGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n    switch (type) {\n      case 1:\n        // Нахождение процента от числа\n        const percent1 = getRandomInt(5, 25) * 5;\n        const number1 = getRandomInt(100, 500);\n        const result1 = Math.round(percent1 / 100 * number1);\n        question = `Найдите ${percent1}% от числа ${number1}`;\n        translationKey = 'tasks.percentages.percentage_of';\n        translationParams = {\n          percent: percent1,\n          number: number1\n        };\n        answer = result1.toString();\n        explanation = `${percent1}% от ${number1} = (${percent1} × ${number1}) / 100 = ${result1}`;\n        explanationKey = 'tasks.percentages.percentage_of_explanation';\n        explanationParams = {\n          percent: percent1,\n          number: number1,\n          result: result1\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 2:\n        // Нахождение числа по проценту\n        const percent2 = getRandomInt(10, 40);\n        const value2 = getRandomInt(20, 80);\n        const total2 = Math.round(value2 * 100 / percent2);\n        question = `Если ${percent2}% числа равны ${value2}, найдите всё число`;\n        translationKey = 'tasks.percentages.number_from_percentage';\n        translationParams = {\n          percent: percent2,\n          value: value2\n        };\n        answer = total2.toString();\n        explanation = `Всё число = (${value2} × 100) / ${percent2} = ${total2}`;\n        explanationKey = 'tasks.percentages.number_from_percentage_explanation';\n        explanationParams = {\n          percent: percent2,\n          value: value2,\n          result: total2\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 3:\n        // Нахождение процентного отношения\n        const part3 = getRandomInt(15, 45);\n        const whole3 = getRandomInt(60, 150);\n        const percentage3 = Math.round(part3 / whole3 * 100);\n        question = `Какой процент составляет ${part3} от ${whole3}?`;\n        translationKey = 'tasks.percentages.percentage_ratio';\n        translationParams = {\n          part: part3,\n          whole: whole3\n        };\n        answer = percentage3.toString();\n        explanation = `(${part3} / ${whole3}) × 100 = ${percentage3}%`;\n        explanationKey = 'tasks.percentages.percentage_ratio_explanation';\n        explanationParams = {\n          part: part3,\n          whole: whole3,\n          result: percentage3\n        };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n      case 4:\n        // Увеличение на процент\n        const number4 = getRandomInt(200, 800);\n        const increase4 = getRandomInt(5, 20);\n        const result4 = Math.round(number4 * (1 + increase4 / 100));\n        question = `Увеличьте число ${number4} на ${increase4}%`;\n        translationKey = 'tasks.percentages.increase_by';\n        translationParams = {\n          number: number4,\n          percent: increase4\n        };\n        answer = result4.toString();\n        explanation = `${number4} + ${increase4}% = ${number4} × 1.${increase4} = ${result4}`;\n        explanationKey = 'tasks.percentages.increase_by_explanation';\n        explanationParams = {\n          number: number4,\n          percent: increase4,\n          result: result4\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 5:\n        // Уменьшение на процент\n        const number5 = getRandomInt(200, 800);\n        const decrease5 = getRandomInt(5, 20);\n        const result5 = Math.round(number5 * (1 - decrease5 / 100));\n        question = `Уменьшите число ${number5} на ${decrease5}%`;\n        translationKey = 'tasks.percentages.decrease_by';\n        translationParams = {\n          number: number5,\n          percent: decrease5\n        };\n        answer = result5.toString();\n        explanation = `${number5} - ${decrease5}% = ${number5} × 0.${100 - decrease5} = ${result5}`;\n        explanationKey = 'tasks.percentages.decrease_by_explanation';\n        explanationParams = {\n          number: number5,\n          percent: decrease5,\n          result: result5\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 6:\n        // Скидка в магазине\n        const price6 = getRandomInt(500, 2000);\n        const discount6 = getRandomInt(10, 30);\n        const finalPrice6 = Math.round(price6 * (1 - discount6 / 100));\n        question = `Товар стоит ${price6} руб. Скидка ${discount6}%. Найдите конечную цену`;\n        translationKey = 'tasks.percentages.discount';\n        translationParams = {\n          price: price6,\n          discount: discount6\n        };\n        answer = finalPrice6.toString();\n        explanation = `Конечная цена = ${price6} - ${discount6}% = ${finalPrice6} руб.`;\n        explanationKey = 'tasks.percentages.discount_explanation';\n        explanationParams = {\n          price: price6,\n          discount: discount6,\n          result: finalPrice6\n        };\n        answerFormat = \"число (руб.)\";\n        formatKey = 'answerFormats.rub';\n        break;\n      case 7:\n        // Налог на добавленную стоимость\n        const price7 = getRandomInt(1000, 5000);\n        const tax7 = 20;\n        const priceWithTax7 = Math.round(price7 * (1 + tax7 / 100));\n        question = `Цена без НДС: ${price7} руб. НДС ${tax7}%. Найдите цену с НДС`;\n        translationKey = 'tasks.percentages.tax';\n        translationParams = {\n          price: price7,\n          tax: tax7\n        };\n        answer = priceWithTax7.toString();\n        explanation = `Цена с НДС = ${price7} + ${tax7}% = ${priceWithTax7} руб.`;\n        explanationKey = 'tasks.percentages.tax_explanation';\n        explanationParams = {\n          price: price7,\n          tax: tax7,\n          result: priceWithTax7\n        };\n        answerFormat = \"число (руб.)\";\n        formatKey = 'answerFormats.rub';\n        break;\n      case 8:\n        // Процент успеваемости\n        const total8 = getRandomInt(20, 30);\n        const correct8 = getRandomInt(15, total8 - 2);\n        const success8 = Math.round(correct8 / total8 * 100);\n        question = `Из ${total8} заданий верно решено ${correct8}. Найдите процент успеваемости`;\n        translationKey = 'tasks.percentages.success_rate';\n        translationParams = {\n          correct: correct8,\n          total: total8\n        };\n        answer = success8.toString();\n        explanation = `Процент успеваемости = (${correct8} / ${total8}) × 100 = ${success8}%`;\n        explanationKey = 'tasks.percentages.success_rate_explanation';\n        explanationParams = {\n          correct: correct8,\n          total: total8,\n          result: success8\n        };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n      case 9:\n        // Распределение бюджета\n        const budget9 = getRandomInt(10000, 50000);\n        const percent9 = getRandomInt(10, 30);\n        const part9 = Math.round(percent9 / 100 * budget9);\n        question = `Бюджет ${budget9} руб. ${percent9}% выделено на проект. Сколько это?`;\n        translationKey = 'tasks.percentages.budget_allocation';\n        translationParams = {\n          budget: budget9,\n          percent: percent9\n        };\n        answer = part9.toString();\n        explanation = `${percent9}% от ${budget9} = (${percent9} × ${budget9}) / 100 = ${part9} руб.`;\n        explanationKey = 'tasks.percentages.budget_allocation_explanation';\n        explanationParams = {\n          budget: budget9,\n          percent: percent9,\n          result: part9\n        };\n        answerFormat = \"число (руб.)\";\n        formatKey = 'answerFormats.rub';\n        break;\n      case 10:\n        // Концентрация раствора\n        const total10 = getRandomInt(200, 500);\n        const substance10 = getRandomInt(30, 100);\n        const concentration10 = Math.round(substance10 / total10 * 100);\n        question = `В ${total10}г раствора содержится ${substance10}г вещества. Найдите концентрацию`;\n        translationKey = 'tasks.percentages.concentration';\n        translationParams = {\n          total: total10,\n          substance: substance10\n        };\n        answer = concentration10.toString();\n        explanation = `Концентрация = (${substance10} / ${total10}) × 100 = ${concentration10}%`;\n        explanationKey = 'tasks.percentages.concentration_explanation';\n        explanationParams = {\n          total: total10,\n          substance: substance10,\n          result: concentration10\n        };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({\n        question,\n        answer,\n        explanation,\n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey,\n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","percentagesGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","percent1","number1","result1","round","percent","number","toString","result","percent2","value2","total2","value","part3","whole3","percentage3","part","whole","number4","increase4","result4","number5","decrease5","result5","price6","discount6","finalPrice6","price","discount","price7","tax7","priceWithTax7","tax","total8","correct8","success8","correct","total","budget9","percent9","part9","budget","total10","substance10","concentration10","substance","has","add","push"],"sources":["/opt/math-app/frontend/src/taskGenerators/day8-percentages.js"],"sourcesContent":["// day8-percentages.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const percentagesGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Нахождение процента от числа\n        const percent1 = getRandomInt(5, 25) * 5;\n        const number1 = getRandomInt(100, 500);\n        const result1 = Math.round((percent1 / 100) * number1);\n        question = `Найдите ${percent1}% от числа ${number1}`;\n        translationKey = 'tasks.percentages.percentage_of';\n        translationParams = { percent: percent1, number: number1 };\n        answer = result1.toString();\n        explanation = `${percent1}% от ${number1} = (${percent1} × ${number1}) / 100 = ${result1}`;\n        explanationKey = 'tasks.percentages.percentage_of_explanation';\n        explanationParams = { percent: percent1, number: number1, result: result1 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 2: // Нахождение числа по проценту\n        const percent2 = getRandomInt(10, 40);\n        const value2 = getRandomInt(20, 80);\n        const total2 = Math.round((value2 * 100) / percent2);\n        question = `Если ${percent2}% числа равны ${value2}, найдите всё число`;\n        translationKey = 'tasks.percentages.number_from_percentage';\n        translationParams = { percent: percent2, value: value2 };\n        answer = total2.toString();\n        explanation = `Всё число = (${value2} × 100) / ${percent2} = ${total2}`;\n        explanationKey = 'tasks.percentages.number_from_percentage_explanation';\n        explanationParams = { percent: percent2, value: value2, result: total2 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 3: // Нахождение процентного отношения\n        const part3 = getRandomInt(15, 45);\n        const whole3 = getRandomInt(60, 150);\n        const percentage3 = Math.round((part3 / whole3) * 100);\n        question = `Какой процент составляет ${part3} от ${whole3}?`;\n        translationKey = 'tasks.percentages.percentage_ratio';\n        translationParams = { part: part3, whole: whole3 };\n        answer = percentage3.toString();\n        explanation = `(${part3} / ${whole3}) × 100 = ${percentage3}%`;\n        explanationKey = 'tasks.percentages.percentage_ratio_explanation';\n        explanationParams = { part: part3, whole: whole3, result: percentage3 };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n\n      case 4: // Увеличение на процент\n        const number4 = getRandomInt(200, 800);\n        const increase4 = getRandomInt(5, 20);\n        const result4 = Math.round(number4 * (1 + increase4 / 100));\n        question = `Увеличьте число ${number4} на ${increase4}%`;\n        translationKey = 'tasks.percentages.increase_by';\n        translationParams = { number: number4, percent: increase4 };\n        answer = result4.toString();\n        explanation = `${number4} + ${increase4}% = ${number4} × 1.${increase4} = ${result4}`;\n        explanationKey = 'tasks.percentages.increase_by_explanation';\n        explanationParams = { number: number4, percent: increase4, result: result4 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 5: // Уменьшение на процент\n        const number5 = getRandomInt(200, 800);\n        const decrease5 = getRandomInt(5, 20);\n        const result5 = Math.round(number5 * (1 - decrease5 / 100));\n        question = `Уменьшите число ${number5} на ${decrease5}%`;\n        translationKey = 'tasks.percentages.decrease_by';\n        translationParams = { number: number5, percent: decrease5 };\n        answer = result5.toString();\n        explanation = `${number5} - ${decrease5}% = ${number5} × 0.${100 - decrease5} = ${result5}`;\n        explanationKey = 'tasks.percentages.decrease_by_explanation';\n        explanationParams = { number: number5, percent: decrease5, result: result5 };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 6: // Скидка в магазине\n        const price6 = getRandomInt(500, 2000);\n        const discount6 = getRandomInt(10, 30);\n        const finalPrice6 = Math.round(price6 * (1 - discount6 / 100));\n        question = `Товар стоит ${price6} руб. Скидка ${discount6}%. Найдите конечную цену`;\n        translationKey = 'tasks.percentages.discount';\n        translationParams = { price: price6, discount: discount6 };\n        answer = finalPrice6.toString();\n        explanation = `Конечная цена = ${price6} - ${discount6}% = ${finalPrice6} руб.`;\n        explanationKey = 'tasks.percentages.discount_explanation';\n        explanationParams = { price: price6, discount: discount6, result: finalPrice6 };\n        answerFormat = \"число (руб.)\";\n        formatKey = 'answerFormats.rub';\n        break;\n\n      case 7: // Налог на добавленную стоимость\n        const price7 = getRandomInt(1000, 5000);\n        const tax7 = 20;\n        const priceWithTax7 = Math.round(price7 * (1 + tax7 / 100));\n        question = `Цена без НДС: ${price7} руб. НДС ${tax7}%. Найдите цену с НДС`;\n        translationKey = 'tasks.percentages.tax';\n        translationParams = { price: price7, tax: tax7 };\n        answer = priceWithTax7.toString();\n        explanation = `Цена с НДС = ${price7} + ${tax7}% = ${priceWithTax7} руб.`;\n        explanationKey = 'tasks.percentages.tax_explanation';\n        explanationParams = { price: price7, tax: tax7, result: priceWithTax7 };\n        answerFormat = \"число (руб.)\";\n        formatKey = 'answerFormats.rub';\n        break;\n\n      case 8: // Процент успеваемости\n        const total8 = getRandomInt(20, 30);\n        const correct8 = getRandomInt(15, total8 - 2);\n        const success8 = Math.round((correct8 / total8) * 100);\n        question = `Из ${total8} заданий верно решено ${correct8}. Найдите процент успеваемости`;\n        translationKey = 'tasks.percentages.success_rate';\n        translationParams = { correct: correct8, total: total8 };\n        answer = success8.toString();\n        explanation = `Процент успеваемости = (${correct8} / ${total8}) × 100 = ${success8}%`;\n        explanationKey = 'tasks.percentages.success_rate_explanation';\n        explanationParams = { correct: correct8, total: total8, result: success8 };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n\n      case 9: // Распределение бюджета\n        const budget9 = getRandomInt(10000, 50000);\n        const percent9 = getRandomInt(10, 30);\n        const part9 = Math.round((percent9 / 100) * budget9);\n        question = `Бюджет ${budget9} руб. ${percent9}% выделено на проект. Сколько это?`;\n        translationKey = 'tasks.percentages.budget_allocation';\n        translationParams = { budget: budget9, percent: percent9 };\n        answer = part9.toString();\n        explanation = `${percent9}% от ${budget9} = (${percent9} × ${budget9}) / 100 = ${part9} руб.`;\n        explanationKey = 'tasks.percentages.budget_allocation_explanation';\n        explanationParams = { budget: budget9, percent: percent9, result: part9 };\n        answerFormat = \"число (руб.)\";\n        formatKey = 'answerFormats.rub';\n        break;\n\n      case 10: // Концентрация раствора\n        const total10 = getRandomInt(200, 500);\n        const substance10 = getRandomInt(30, 100);\n        const concentration10 = Math.round((substance10 / total10) * 100);\n        question = `В ${total10}г раствора содержится ${substance10}г вещества. Найдите концентрацию`;\n        translationKey = 'tasks.percentages.concentration';\n        translationParams = { total: total10, substance: substance10 };\n        answer = concentration10.toString();\n        explanation = `Концентрация = (${substance10} / ${total10}) × 100 = ${concentration10}%`;\n        explanationKey = 'tasks.percentages.concentration_explanation';\n        explanationParams = { total: total10, substance: substance10, result: concentration10 };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey, \n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}