{"ast":null,"code":"// day13-symmetry.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const symmetryGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n    switch (type) {\n      case 1:\n        // Осевая симметрия относительно X\n        const x1 = getRandomInt(-4, 4);\n        const y1 = getRandomInt(-4, 4);\n        const symmetricPoint1 = `(${x1}, ${-y1})`;\n        question = `Найдите точку, симметричную точке (${x1}, ${y1}) относительно оси X`;\n        translationKey = 'tasks.symmetry.axis_x';\n        translationParams = {\n          x: x1,\n          y: y1\n        };\n        answer = symmetricPoint1;\n        explanation = `При симметрии относительно оси X координата y меняет знак: (${x1}, ${y1}) → ${symmetricPoint1}`;\n        explanationKey = 'tasks.symmetry.axis_x_explanation';\n        explanationParams = {\n          x: x1,\n          y: y1,\n          result: symmetricPoint1\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 2:\n        // Осевая симметрия относительно Y\n        const x2 = getRandomInt(-4, 4);\n        const y2 = getRandomInt(-4, 4);\n        const symmetricPoint2 = `(${-x2}, ${y2})`;\n        question = `Найдите точку, симметричную точке (${x2}, ${y2}) относительно оси Y`;\n        translationKey = 'tasks.symmetry.axis_y';\n        translationParams = {\n          x: x2,\n          y: y2\n        };\n        answer = symmetricPoint2;\n        explanation = `При симметрии относительно оси Y координата x меняет знак: (${x2}, ${y2}) → ${symmetricPoint2}`;\n        explanationKey = 'tasks.symmetry.axis_y_explanation';\n        explanationParams = {\n          x: x2,\n          y: y2,\n          result: symmetricPoint2\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 3:\n        // Центральная симметрия\n        const x3 = getRandomInt(-4, 4);\n        const y3 = getRandomInt(-4, 4);\n        const symmetricPoint3 = `(${-x3}, ${-y3})`;\n        question = `Найдите точку, симметричную точке (${x3}, ${y3}) относительно начала координат`;\n        translationKey = 'tasks.symmetry.central';\n        translationParams = {\n          x: x3,\n          y: y3\n        };\n        answer = symmetricPoint3;\n        explanation = `При симметрии относительно начала координат обе координаты меняют знак: (${x3}, ${y3}) → ${symmetricPoint3}`;\n        explanationKey = 'tasks.symmetry.central_explanation';\n        explanationParams = {\n          x: x3,\n          y: y3,\n          result: symmetricPoint3\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 4:\n        // Симметрия относительно точки\n        const x4 = getRandomInt(-3, 3);\n        const y4 = getRandomInt(-3, 3);\n        const centerX4 = getRandomInt(-2, 2);\n        const centerY4 = getRandomInt(-2, 2);\n        const symX4 = 2 * centerX4 - x4;\n        const symY4 = 2 * centerY4 - y4;\n        const symmetricPoint4 = `(${symX4}, ${symY4})`;\n        question = `Найдите точку, симметричную точке (${x4}, ${y4}) относительно точки (${centerX4}, ${centerY4})`;\n        translationKey = 'tasks.symmetry.point';\n        translationParams = {\n          x: x4,\n          y: y4,\n          centerX: centerX4,\n          centerY: centerY4\n        };\n        answer = symmetricPoint4;\n        explanation = `x' = 2 × ${centerX4} - ${x4} = ${symX4}, y' = 2 × ${centerY4} - ${y4} = ${symY4}`;\n        explanationKey = 'tasks.symmetry.point_explanation';\n        explanationParams = {\n          x: x4,\n          y: y4,\n          centerX: centerX4,\n          centerY: centerY4,\n          resultX: symX4,\n          resultY: symY4,\n          result: symmetricPoint4\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 5:\n        // Количество осей симметрии фигуры\n        const shapes5 = [{\n          shape: \"равносторонний треугольник\",\n          axes: 3\n        }, {\n          shape: \"квадрат\",\n          axes: 4\n        }, {\n          shape: \"прямоугольник (не квадрат)\",\n          axes: 2\n        }, {\n          shape: \"правильный пятиугольник\",\n          axes: 5\n        }, {\n          shape: \"окружность\",\n          axes: \"бесконечное\"\n        }];\n        const shape5 = shapes5[getRandomInt(0, shapes5.length - 1)];\n        question = `Сколько осей симметрии у ${shape5.shape}?`;\n        translationKey = 'tasks.symmetry.axes_count';\n        translationParams = {\n          shape: shape5.shape\n        };\n        answer = shape5.axes.toString();\n        explanation = `${shape5.shape} имеет ${shape5.axes} ${typeof shape5.axes === 'number' ? 'оси' : 'количество'} симметрии`;\n        explanationKey = 'tasks.symmetry.axes_count_explanation';\n        explanationParams = {\n          shape: shape5.shape,\n          result: shape5.axes\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 6:\n        // Симметричные фигуры в природе\n        const naturalObjects6 = [{\n          object: \"лист дерева\",\n          symmetry: \"билатеральная\"\n        }, {\n          object: \"снежинка\",\n          symmetry: \"радиальная\"\n        }, {\n          object极: \"морская звезда\",\n          symmetry: \"радиальная\"\n        }, {\n          object: \"бабочка\",\n          symmetry: \"билатеральная\"\n        }, {\n          object: \"солнце\",\n          symmetry: \"радиальная\"\n        }];\n        const object6 = naturalObjects6[getRandomInt(0, naturalObjects6.length - 1)];\n        question = `Какой тип симметрии у ${object6.object}?`;\n        translationKey = 'tasks.symmetry.nature';\n        translationParams = {\n          object: object6.object\n        };\n        answer = object6.symmetry;\n        explanation = `${object6.object} имеет ${object6.symmetry} симметрию`;\n        explanationKey = 'tasks.symmetry.nature_explanation';\n        explanationParams = {\n          object: object6.object,\n          result: object6.symmetry\n        };\n        answerFormat = \"тип симметрии\";\n        formatKey = 'answerFormats.symmetry_type';\n        break;\n      case 7:\n        // Построение симметричной фигуры\n        const figure7 = \"треугольник ABC\";\n        const axis7 = [\"оси X\", \"оси Y\", \"начала координат\"][getRandomInt(0, 2)];\n        const resultFigure7 = \"треугольник A'B'C'\";\n        question = `Постройте фигуру, симметричную ${figure7} относительно ${axis7}`;\n        translationKey = 'tasks.symmetry.construct';\n        translationParams = {\n          figure: figure7,\n          axis: axis7\n        };\n        answer = resultFigure7;\n        explanation = `Каждая точка ${figure7} отражается относительно ${axis7}`;\n        explanationKey = 'tasks.symmetry.construct_explanation';\n        explanationParams = {\n          figure: figure7,\n          axis: axis7,\n          result: resultFigure7\n        };\n        answerFormat = \"название фигуры\";\n        formatKey = 'answerFormats.figure_name';\n        break;\n      case 8:\n        // Определение центра симметрии\n        const points8 = [{\n          x: 2,\n          y: 3\n        }, {\n          x: 4,\n          y: 1\n        }, {\n          x: 6,\n          y: -1\n        }];\n        const centerX8 = 4;\n        const centerY8 = 1;\n        const centerPoint8 = `(${centerX8}, ${centerY8})`;\n        question = `Точки ${points8.map(p => `(${p.x},${p.y})`).join(', ')} симметричны. Найдите центр симметрии`;\n        translationKey = 'tasks.symmetry.find_center';\n        translationParams = {\n          points: points8.map(p => `(${p.x},${p.y})`).join(', ')\n        };\n        answer = centerPoint8;\n        explanation = `Центр симметрии находится посередине между соответствующими точками`;\n        explanationKey = 'tasks.symmetry.find_center_explanation';\n        explanationParams = {\n          points: points8.map(p => `(${p.x},${p.y})`).join(', '),\n          result: centerPoint8\n        };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n      case 9:\n        // Симметрия в буквах\n        const letters9 = [{\n          letter: \"A\",\n          symmetry: \"вертикальная\"\n        }, {\n          letter: \"B\",\n          symmetry: \"вертикальная\"\n        }, {\n          letter: \"H\",\n          symmetry: \"вертикальная и горизонтальная\"\n        }, {\n          letter: \"O\",\n          symmetry: \"вертикальная и горизонтальная\"\n        }, {\n          letter: \"M\",\n          symmetry: \"вертикальная\"\n        }];\n        const letter9 = letters9[getRandomInt(0, letters9.length - 1)];\n        question = `Какая симметрия у буквы \"${letter9.letter}\"?`;\n        translationKey = 'tasks.symmetry.letters';\n        translationParams = {\n          letter: letter9.letter\n        };\n        answer = letter9.symmetry;\n        explanation = `Буква \"${letter9.letter}\" имеет ${letter9.symmetry} симметрию`;\n        explanationKey = 'tasks.symmetry.letters_explanation';\n        explanationParams = {\n          letter: letter9.letter,\n          result: letter9.symmetry\n        };\n        answerFormat = \"тип симметрии\";\n        formatKey = 'answerFormats.symmetry_type';\n        break;\n      case 10:\n        // Симметричные выражения\n        const a10 = getRandomInt(1, 5);\n        const b10 = getRandomInt(1, 5);\n        question = `Являются ли выражения ${a10}x + ${b10}y и ${b10}x + ${a10}y симметричными?`;\n        translationKey = 'tasks.symmetry.expression';\n        translationParams = {\n          a: a10,\n          b: b10\n        };\n        answer = \"да\";\n        explanation = `Выражения симметричны относительно замены x и y: ${a10}x + ${b10}y → ${b10}x + ${a10}y`;\n        explanationKey = 'tasks.symmetry.expression_explanation';\n        explanationParams = {\n          a: a10,\n          b: b10,\n          result: \"да\"\n        };\n        answerFormat = \"да/нет\";\n        formatKey = 'answerFormats.yes_no';\n        break;\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({\n        question,\n        answer,\n        explanation,\n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey,\n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","symmetryGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","x1","y1","symmetricPoint1","x","y","result","x2","y2","symmetricPoint2","x3","y3","symmetricPoint3","x4","y4","centerX4","centerY4","symX4","symY4","symmetricPoint4","centerX","centerY","resultX","resultY","shapes5","shape","axes","shape5","toString","naturalObjects6","object","symmetry","object极","object6","figure7","axis7","resultFigure7","figure","axis","points8","centerX8","centerY8","centerPoint8","map","p","join","points","letters9","letter","letter9","a10","b10","a","b","has","add","push"],"sources":["/opt/math-app/frontend/src/taskGenerators/day13-symmetry.js"],"sourcesContent":["// day13-symmetry.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const symmetryGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Осевая симметрия относительно X\n        const x1 = getRandomInt(-4, 4);\n        const y1 = getRandomInt(-4, 4);\n        const symmetricPoint1 = `(${x1}, ${-y1})`;\n        question = `Найдите точку, симметричную точке (${x1}, ${y1}) относительно оси X`;\n        translationKey = 'tasks.symmetry.axis_x';\n        translationParams = { x: x1, y: y1 };\n        answer = symmetricPoint1;\n        explanation = `При симметрии относительно оси X координата y меняет знак: (${x1}, ${y1}) → ${symmetricPoint1}`;\n        explanationKey = 'tasks.symmetry.axis_x_explanation';\n        explanationParams = { x: x1, y: y1, result: symmetricPoint1 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 2: // Осевая симметрия относительно Y\n        const x2 = getRandomInt(-4, 4);\n        const y2 = getRandomInt(-4, 4);\n        const symmetricPoint2 = `(${-x2}, ${y2})`;\n        question = `Найдите точку, симметричную точке (${x2}, ${y2}) относительно оси Y`;\n        translationKey = 'tasks.symmetry.axis_y';\n        translationParams = { x: x2, y: y2 };\n        answer = symmetricPoint2;\n        explanation = `При симметрии относительно оси Y координата x меняет знак: (${x2}, ${y2}) → ${symmetricPoint2}`;\n        explanationKey = 'tasks.symmetry.axis_y_explanation';\n        explanationParams = { x: x2, y: y2, result: symmetricPoint2 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 3: // Центральная симметрия\n        const x3 = getRandomInt(-4, 4);\n        const y3 = getRandomInt(-4, 4);\n        const symmetricPoint3 = `(${-x3}, ${-y3})`;\n        question = `Найдите точку, симметричную точке (${x3}, ${y3}) относительно начала координат`;\n        translationKey = 'tasks.symmetry.central';\n        translationParams = { x: x3, y: y3 };\n        answer = symmetricPoint3;\n        explanation = `При симметрии относительно начала координат обе координаты меняют знак: (${x3}, ${y3}) → ${symmetricPoint3}`;\n        explanationKey = 'tasks.symmetry.central_explanation';\n        explanationParams = { x: x3, y: y3, result: symmetricPoint3 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 4: // Симметрия относительно точки\n        const x4 = getRandomInt(-3, 3);\n        const y4 = getRandomInt(-3, 3);\n        const centerX4 = getRandomInt(-2, 2);\n        const centerY4 = getRandomInt(-2, 2);\n        const symX4 = 2 * centerX4 - x4;\n        const symY4 = 2 * centerY4 - y4;\n        const symmetricPoint4 = `(${symX4}, ${symY4})`;\n        question = `Найдите точку, симметричную точке (${x4}, ${y4}) относительно точки (${centerX4}, ${centerY4})`;\n        translationKey = 'tasks.symmetry.point';\n        translationParams = { x: x4, y: y4, centerX: centerX4, centerY: centerY4 };\n        answer = symmetricPoint4;\n        explanation = `x' = 2 × ${centerX4} - ${x4} = ${symX4}, y' = 2 × ${centerY4} - ${y4} = ${symY4}`;\n        explanationKey = 'tasks.symmetry.point_explanation';\n        explanationParams = { x: x4, y: y4, centerX: centerX4, centerY: centerY4, resultX: symX4, resultY: symY4, result: symmetricPoint4 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 5: // Количество осей симметрии фигуры\n        const shapes5 = [\n          { shape: \"равносторонний треугольник\", axes: 3 },\n          { shape: \"квадрат\", axes: 4 },\n          { shape: \"прямоугольник (не квадрат)\", axes: 2 },\n          { shape: \"правильный пятиугольник\", axes: 5 },\n          { shape: \"окружность\", axes: \"бесконечное\" }\n        ];\n        const shape5 = shapes5[getRandomInt(0, shapes5.length - 1)];\n        question = `Сколько осей симметрии у ${shape5.shape}?`;\n        translationKey = 'tasks.symmetry.axes_count';\n        translationParams = { shape: shape5.shape };\n        answer = shape5.axes.toString();\n        explanation = `${shape5.shape} имеет ${shape5.axes} ${typeof shape5.axes === 'number' ? 'оси' : 'количество'} симметрии`;\n        explanationKey = 'tasks.symmetry.axes_count_explanation';\n        explanationParams = { shape: shape5.shape, result: shape5.axes };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 6: // Симметричные фигуры в природе\n        const naturalObjects6 = [\n          { object: \"лист дерева\", symmetry: \"билатеральная\" },\n          { object: \"снежинка\", symmetry: \"радиальная\" },\n          { object极: \"морская звезда\", symmetry: \"радиальная\" },\n          { object: \"бабочка\", symmetry: \"билатеральная\" },\n          { object: \"солнце\", symmetry: \"радиальная\" }\n        ];\n        const object6 = naturalObjects6[getRandomInt(0, naturalObjects6.length - 1)];\n        question = `Какой тип симметрии у ${object6.object}?`;\n        translationKey = 'tasks.symmetry.nature';\n        translationParams = { object: object6.object };\n        answer = object6.symmetry;\n        explanation = `${object6.object} имеет ${object6.symmetry} симметрию`;\n        explanationKey = 'tasks.symmetry.nature_explanation';\n        explanationParams = { object: object6.object, result: object6.symmetry };\n        answerFormat = \"тип симметрии\";\n        formatKey = 'answerFormats.symmetry_type';\n        break;\n\n      case 7: // Построение симметричной фигуры\n        const figure7 = \"треугольник ABC\";\n        const axis7 = [\"оси X\", \"оси Y\", \"начала координат\"][getRandomInt(0, 2)];\n        const resultFigure7 = \"треугольник A'B'C'\";\n        question = `Постройте фигуру, симметричную ${figure7} относительно ${axis7}`;\n        translationKey = 'tasks.symmetry.construct';\n        translationParams = { figure: figure7, axis: axis7 };\n        answer = resultFigure7;\n        explanation = `Каждая точка ${figure7} отражается относительно ${axis7}`;\n        explanationKey = 'tasks.symmetry.construct_explanation';\n        explanationParams = { figure: figure7, axis: axis7, result: resultFigure7 };\n        answerFormat = \"название фигуры\";\n        formatKey = 'answerFormats.figure_name';\n        break;\n\n      case 8: // Определение центра симметрии\n        const points8 = [\n          { x: 2, y: 3 },\n          { x: 4, y: 1 },\n          { x: 6, y: -1 }\n        ];\n        const centerX8 = 4;\n        const centerY8 = 1;\n        const centerPoint8 = `(${centerX8}, ${centerY8})`;\n        question = `Точки ${points8.map(p => `(${p.x},${p.y})`).join(', ')} симметричны. Найдите центр симметрии`;\n        translationKey = 'tasks.symmetry.find_center';\n        translationParams = { points: points8.map(p => `(${p.x},${p.y})`).join(', ') };\n        answer = centerPoint8;\n        explanation = `Центр симметрии находится посередине между соответствующими точками`;\n        explanationKey = 'tasks.symmetry.find_center_explanation';\n        explanationParams = { points: points8.map(p => `(${p.x},${p.y})`).join(', '), result: centerPoint8 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 9: // Симметрия в буквах\n        const letters9 = [\n          { letter: \"A\", symmetry: \"вертикальная\" },\n          { letter: \"B\", symmetry: \"вертикальная\" },\n          { letter: \"H\", symmetry: \"вертикальная и горизонтальная\" },\n          { letter: \"O\", symmetry: \"вертикальная и горизонтальная\" },\n          { letter: \"M\", symmetry: \"вертикальная\" }\n        ];\n        const letter9 = letters9[getRandomInt(0, letters9.length - 1)];\n        question = `Какая симметрия у буквы \"${letter9.letter}\"?`;\n        translationKey = 'tasks.symmetry.letters';\n        translationParams = { letter: letter9.letter };\n        answer = letter9.symmetry;\n        explanation = `Буква \"${letter9.letter}\" имеет ${letter9.symmetry} симметрию`;\n        explanationKey = 'tasks.symmetry.letters_explanation';\n        explanationParams = { letter: letter9.letter, result: letter9.symmetry };\n        answerFormat = \"тип симметрии\";\n        formatKey = 'answerFormats.symmetry_type';\n        break;\n\n      case 10: // Симметричные выражения\n        const a10 = getRandomInt(1, 5);\n        const b10 = getRandomInt(1, 5);\n        question = `Являются ли выражения ${a10}x + ${b10}y и ${b10}x + ${a10}y симметричными?`;\n        translationKey = 'tasks.symmetry.expression';\n        translationParams = { a: a10, b: b10 };\n        answer = \"да\";\n        explanation = `Выражения симметричны относительно замены x и y: ${a10}x + ${b10}y → ${b10}x + ${a10}y`;\n        explanationKey = 'tasks.symmetry.expression_explanation';\n        explanationParams = { a: a10, b: b10, result: \"да\" };\n        answerFormat = \"да/нет\";\n        formatKey = 'answerFormats.yes_no';\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey, \n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}