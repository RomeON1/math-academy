{"ast":null,"code":"// day10-volumes.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const volumesGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n    switch (type) {\n      case 1:\n        // Объем куба\n        const edge1 = getRandomInt(2, 8);\n        const volume1 = edge1 * edge1 * edge1;\n        question = `Найдите объем куба с ребром ${edge1} см`;\n        translationKey = 'tasks.volumes.cube';\n        translationParams = {\n          edge: edge1\n        };\n        answer = volume1.toString();\n        explanation = `Объем куба = ребро³ = ${edge1} × ${edge1} × ${edge1} = ${volume1} см³`;\n        explanationKey = 'tasks.volumes.cube_explanation';\n        explanationParams = {\n          edge: edge1,\n          result: volume1\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      case 2:\n        // Объем прямоугольного параллелепипеда\n        const length2 = getRandomInt(4, 10);\n        const width2 = getRandomInt(3, 8);\n        const height2 = getRandomInt(5, 12);\n        const volume2 = length2 * width2 * height2;\n        question = `Найдите объем прямоугольного параллелепипеда ${length2}×${width2}×${height2} см`;\n        translationKey = 'tasks.volumes.rectangular_prism';\n        translationParams = {\n          length: length2,\n          width: width2,\n          height: height2\n        };\n        answer = volume2.toString();\n        explanation = `Объем = длина × ширина × высота = ${length2} × ${width2} × ${height2} = ${volume2} см³`;\n        explanationKey = 'tasks.volumes.rectangular_prism_explanation';\n        explanationParams = {\n          length: length2,\n          width: width2,\n          height: height2,\n          result: volume2\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      case 3:\n        // Объем цилиндра\n        const radius3 = getRandomInt(2, 5);\n        const height3 = getRandomInt(6, 12);\n        const volume3 = Math.round(3.14 * radius3 * radius3 * height3);\n        question = `Найдите объем цилиндра радиусом ${radius3} см и высотой ${height3} см (π≈3.14)`;\n        translationKey = 'tasks.volumes.cylinder';\n        translationParams = {\n          radius: radius3,\n          height: height3\n        };\n        answer = volume3.toString();\n        explanation = `Объем цилиндра = π × радиус² × высота = 3.14 × ${radius3}² × ${height3} = ${volume3} см³`;\n        explanationKey = 'tasks.volumes.cylinder_explanation';\n        explanationParams = {\n          radius: radius3,\n          height: height3,\n          result: volume3\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      case 4:\n        // Объем конуса\n        const radius4 = getRandomInt(2, 5);\n        const height4 = getRandomInt(6, 12);\n        const volume4 = Math.round(3.14 * radius4 * radius4 * height4 / 3);\n        question = `Найдите объем конуса радиусом ${radius4} см и высотой ${height4} см (π≈3.14)`;\n        translationKey = 'tasks.volumes.cone';\n        translationParams = {\n          radius: radius4,\n          height: height4\n        };\n        answer = volume4.toString();\n        explanation = `Объем конуса = (π × радиус² × высота) / 3 = (3.14 × ${radius4}² × ${height4}) / 3 = ${volume4} см³`;\n        explanationKey = 'tasks.volumes.cone_explanation';\n        explanationParams = {\n          radius: radius4,\n          height: height4,\n          result: volume4\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      case 5:\n        // Объем пирамиды\n        const baseSide5 = getRandomInt(4, 8);\n        const height5 = getRandomInt(6, 12);\n        const baseArea5 = baseSide5 * baseSide5;\n        const volume5 = Math.round(baseArea5 * height5 / 3);\n        question = `Найдите объем квадратной пирамиды со стороной основания ${baseSide5} см и высотой ${height5} см`;\n        translationKey = 'tasks.volumes.pyramid';\n        translationParams = {\n          side: baseSide5,\n          height: height5\n        };\n        answer = volume5.toString();\n        explanation = `Площадь основания = ${baseSide5} × ${baseSide5} = ${baseArea5} см², объем = (площадь основания × высота) / 3 = (${baseArea5} × ${height5}) / 3 = ${volume5} см³`;\n        explanationKey = 'tasks.volumes.pyramid_explanation';\n        explanationParams = {\n          side: baseSide5,\n          height: height5,\n          baseArea: baseArea5,\n          result: volume5\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      case 6:\n        // Объем шара\n        const radius6 = getRandomInt(3, 6);\n        const volume6 = Math.round(4 * 3.14 * radius6 * radius6 * radius6 / 3);\n        question = `Найдите объем шара радиусом ${radius6} см (π≈3.14)`;\n        translationKey = 'tasks.volumes.sphere';\n        translationParams = {\n          radius: radius6\n        };\n        answer = volume6.toString();\n        explanation = `Объем шара = (4 × π × радиус³) / 3 = (4 × 3.14 × ${radius6}³) / 3 = ${volume6} см³`;\n        explanationKey = 'tasks.volumes.sphere_explanation';\n        explanationParams = {\n          radius: radius6,\n          result: volume6\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      case 7:\n        // Объем призмы\n        const base7 = getRandomInt(4, 8);\n        const height7 = getRandomInt(3, 6);\n        const length7 = getRandomInt(5, 10);\n        const baseArea7 = base7 * height7 / 2;\n        const volume7 = Math.round(baseArea7 * length7);\n        question = `Найдите объем треугольной призмы с основанием ${base7} см, высотой ${height7} см и длиной ${length7} см`;\n        translationKey = 'tasks.volumes.triangular_prism';\n        translationParams = {\n          base: base7,\n          height: height7,\n          length: length7\n        };\n        answer = volume7.toString();\n        explanation = `Площадь основания = (${base7} × ${height7}) / 2 = ${baseArea7} см², объем = площадь основания × длина = ${baseArea7} × ${length7} = ${volume7} см³`;\n        explanationKey = 'tasks.volumes.triangular_prism_explanation';\n        explanationParams = {\n          base: base7,\n          height: height7,\n          length: length7,\n          baseArea: baseArea7,\n          result: volume7\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      case 8:\n        // Объем через площадь основания\n        const baseArea8 = getRandomInt(20, 50);\n        const height8 = getRandomInt(6, 12);\n        const volume8 = baseArea8 * height8;\n        question = `Площадь основания цилиндра ${baseArea8} см², высота ${height8} см. Найдите объем`;\n        translationKey = 'tasks.volumes.from_base_area';\n        translationParams = {\n          area: baseArea8,\n          height: height8\n        };\n        answer = volume8.toString();\n        explanation = `Объем = площадь основания × высота = ${baseArea8} × ${height8} = ${volume8} см³`;\n        explanationKey = 'tasks.volumes.from_base_area_explanation';\n        explanationParams = {\n          area: baseArea8,\n          height: height8,\n          result: volume8\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      case 9:\n        // Сравнение объемов\n        const edgeA9 = getRandomInt(3, 6);\n        const edgeB9 = getRandomInt(4, 7);\n        const volumeA9 = edgeA9 * edgeA9 * edgeA9;\n        const volumeB9 = edgeB9 * edgeB9 * edgeB9;\n        const comparisonResult = volumeA9 > volumeB9 ? \"больше\" : volumeA9 < volumeB9 ? \"меньше\" : \"равны\";\n        question = `Сравните объемы кубов с ребрами ${edgeA9} см и ${edgeB9} см`;\n        translationKey = 'tasks.volumes.compare_volumes';\n        translationParams = {\n          edgeA: edgeA9,\n          edgeB: edgeB9\n        };\n        answer = comparisonResult;\n        explanation = `Объем₁ = ${edgeA9}³ = ${volumeA9} см³, объем₂ = ${edgeB9}³ = ${volumeB9} см³ → ${volumeA9} ${comparisonResult} ${volumeB9}`;\n        explanationKey = 'tasks.volumes.compare_volumes_explanation';\n        explanationParams = {\n          edgeA: edgeA9,\n          edgeB: edgeB9,\n          volumeA: volumeA9,\n          volumeB: volumeB9,\n          result: comparisonResult\n        };\n        answerFormat = \"больше/меньше/равно\";\n        formatKey = 'answerFormats.comparison';\n        break;\n      case 10:\n        // Объем составного тела\n        const cubeEdge10 = getRandomInt(3, 5);\n        const prismBase10 = getRandomInt(4, 6);\n        const prismHeight10 = getRandomInt(3, 5);\n        const prismLength10 = getRandomInt(4, 6);\n        const cubeVolume10 = cubeEdge10 * cubeEdge10 * cubeEdge10;\n        const prismVolume10 = Math.round(prismBase10 * prismHeight10 / 2 * prismLength10);\n        const totalVolume10 = cubeVolume10 + prismVolume10;\n        question = `Найдите объем фигуры: куб с ребром ${cubeEdge10} см и треугольная призма с основанием ${prismBase10} см, высотой ${prismHeight10} см и длиной ${prismLength10} см`;\n        translationKey = 'tasks.volumes.composite_volume';\n        translationParams = {\n          cubeEdge: cubeEdge10,\n          prismBase: prismBase10,\n          prismHeight: prismHeight10,\n          prismLength: prismLength10\n        };\n        answer = totalVolume10.toString();\n        explanation = `Объем куба = ${cubeEdge10}³ = ${cubeVolume10} см³, объем призмы = (${prismBase10} × ${prismHeight10} / 2) × ${prismLength10} = ${prismVolume10} см³, общий объем = ${cubeVolume10} + ${prismVolume10} = ${totalVolume10} см³`;\n        explanationKey = 'tasks.volumes.composite_volume_explanation';\n        explanationParams = {\n          cubeVolume: cubeVolume10,\n          prismVolume: prismVolume10,\n          result: totalVolume10\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({\n        question,\n        answer,\n        explanation,\n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey,\n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","volumesGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","edge1","volume1","edge","toString","result","length2","width2","height2","volume2","width","height","radius3","height3","volume3","round","radius","radius4","height4","volume4","baseSide5","height5","baseArea5","volume5","side","baseArea","radius6","volume6","base7","height7","length7","baseArea7","volume7","base","baseArea8","height8","volume8","area","edgeA9","edgeB9","volumeA9","volumeB9","comparisonResult","edgeA","edgeB","volumeA","volumeB","cubeEdge10","prismBase10","prismHeight10","prismLength10","cubeVolume10","prismVolume10","totalVolume10","cubeEdge","prismBase","prismHeight","prismLength","cubeVolume","prismVolume","has","add","push"],"sources":["/opt/math-app/frontend/src/taskGenerators/day10-volumes.js"],"sourcesContent":["// day10-volumes.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const volumesGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Объем куба\n        const edge1 = getRandomInt(2, 8);\n        const volume1 = edge1 * edge1 * edge1;\n        question = `Найдите объем куба с ребром ${edge1} см`;\n        translationKey = 'tasks.volumes.cube';\n        translationParams = { edge: edge1 };\n        answer = volume1.toString();\n        explanation = `Объем куба = ребро³ = ${edge1} × ${edge1} × ${edge1} = ${volume1} см³`;\n        explanationKey = 'tasks.volumes.cube_explanation';\n        explanationParams = { edge: edge1, result: volume1 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      case 2: // Объем прямоугольного параллелепипеда\n        const length2 = getRandomInt(4, 10);\n        const width2 = getRandomInt(3, 8);\n        const height2 = getRandomInt(5, 12);\n        const volume2 = length2 * width2 * height2;\n        question = `Найдите объем прямоугольного параллелепипеда ${length2}×${width2}×${height2} см`;\n        translationKey = 'tasks.volumes.rectangular_prism';\n        translationParams = { length: length2, width: width2, height: height2 };\n        answer = volume2.toString();\n        explanation = `Объем = длина × ширина × высота = ${length2} × ${width2} × ${height2} = ${volume2} см³`;\n        explanationKey = 'tasks.volumes.rectangular_prism_explanation';\n        explanationParams = { length: length2, width: width2, height: height2, result: volume2 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      case 3: // Объем цилиндра\n        const radius3 = getRandomInt(2, 5);\n        const height3 = getRandomInt(6, 12);\n        const volume3 = Math.round(3.14 * radius3 * radius3 * height3);\n        question = `Найдите объем цилиндра радиусом ${radius3} см и высотой ${height3} см (π≈3.14)`;\n        translationKey = 'tasks.volumes.cylinder';\n        translationParams = { radius: radius3, height: height3 };\n        answer = volume3.toString();\n        explanation = `Объем цилиндра = π × радиус² × высота = 3.14 × ${radius3}² × ${height3} = ${volume3} см³`;\n        explanationKey = 'tasks.volumes.cylinder_explanation';\n        explanationParams = { radius: radius3, height: height3, result: volume3 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      case 4: // Объем конуса\n        const radius4 = getRandomInt(2, 5);\n        const height4 = getRandomInt(6, 12);\n        const volume4 = Math.round((3.14 * radius4 * radius4 * height4) / 3);\n        question = `Найдите объем конуса радиусом ${radius4} см и высотой ${height4} см (π≈3.14)`;\n        translationKey = 'tasks.volumes.cone';\n        translationParams = { radius: radius4, height: height4 };\n        answer = volume4.toString();\n        explanation = `Объем конуса = (π × радиус² × высота) / 3 = (3.14 × ${radius4}² × ${height4}) / 3 = ${volume4} см³`;\n        explanationKey = 'tasks.volumes.cone_explanation';\n        explanationParams = { radius: radius4, height: height4, result: volume4 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      case 5: // Объем пирамиды\n        const baseSide5 = getRandomInt(4, 8);\n        const height5 = getRandomInt(6, 12);\n        const baseArea5 = baseSide5 * baseSide5;\n        const volume5 = Math.round((baseArea5 * height5) / 3);\n        question = `Найдите объем квадратной пирамиды со стороной основания ${baseSide5} см и высотой ${height5} см`;\n        translationKey = 'tasks.volumes.pyramid';\n        translationParams = { side: baseSide5, height: height5 };\n        answer = volume5.toString();\n        explanation = `Площадь основания = ${baseSide5} × ${baseSide5} = ${baseArea5} см², объем = (площадь основания × высота) / 3 = (${baseArea5} × ${height5}) / 3 = ${volume5} см³`;\n        explanationKey = 'tasks.volumes.pyramid_explanation';\n        explanationParams = { side: baseSide5, height: height5, baseArea: baseArea5, result: volume5 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      case 6: // Объем шара\n        const radius6 = getRandomInt(3, 6);\n        const volume6 = Math.round((4 * 3.14 * radius6 * radius6 * radius6) / 3);\n        question = `Найдите объем шара радиусом ${radius6} см (π≈3.14)`;\n        translationKey = 'tasks.volumes.sphere';\n        translationParams = { radius: radius6 };\n        answer = volume6.toString();\n        explanation = `Объем шара = (4 × π × радиус³) / 3 = (4 × 3.14 × ${radius6}³) / 3 = ${volume6} см³`;\n        explanationKey = 'tasks.volumes.sphere_explanation';\n        explanationParams = { radius: radius6, result: volume6 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      case 7: // Объем призмы\n        const base7 = getRandomInt(4, 8);\n        const height7 = getRandomInt(3, 6);\n        const length7 = getRandomInt(5, 10);\n        const baseArea7 = (base7 * height7) / 2;\n        const volume7 = Math.round(baseArea7 * length7);\n        question = `Найдите объем треугольной призмы с основанием ${base7} см, высотой ${height7} см и длиной ${length7} см`;\n        translationKey = 'tasks.volumes.triangular_prism';\n        translationParams = { base: base7, height: height7, length: length7 };\n        answer = volume7.toString();\n        explanation = `Площадь основания = (${base7} × ${height7}) / 2 = ${baseArea7} см², объем = площадь основания × длина = ${baseArea7} × ${length7} = ${volume7} см³`;\n        explanationKey = 'tasks.volumes.triangular_prism_explanation';\n        explanationParams = { base: base7, height: height7, length: length7, baseArea: baseArea7, result: volume7 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      case 8: // Объем через площадь основания\n        const baseArea8 = getRandomInt(20, 50);\n        const height8 = getRandomInt(6, 12);\n        const volume8 = baseArea8 * height8;\n        question = `Площадь основания цилиндра ${baseArea8} см², высота ${height8} см. Найдите объем`;\n        translationKey = 'tasks.volumes.from_base_area';\n        translationParams = { area: baseArea8, height: height8 };\n        answer = volume8.toString();\n        explanation = `Объем = площадь основания × высота = ${baseArea8} × ${height8} = ${volume8} см³`;\n        explanationKey = 'tasks.volumes.from_base_area_explanation';\n        explanationParams = { area: baseArea8, height: height8, result: volume8 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      case 9: // Сравнение объемов\n        const edgeA9 = getRandomInt(3, 6);\n        const edgeB9 = getRandomInt(4, 7);\n        const volumeA9 = edgeA9 * edgeA9 * edgeA9;\n        const volumeB9 = edgeB9 * edgeB9 * edgeB9;\n        const comparisonResult = volumeA9 > volumeB9 ? \"больше\" : volumeA9 < volumeB9 ? \"меньше\" : \"равны\";\n        question = `Сравните объемы кубов с ребрами ${edgeA9} см и ${edgeB9} см`;\n        translationKey = 'tasks.volumes.compare_volumes';\n        translationParams = { edgeA: edgeA9, edgeB: edgeB9 };\n        answer = comparisonResult;\n        explanation = `Объем₁ = ${edgeA9}³ = ${volumeA9} см³, объем₂ = ${edgeB9}³ = ${volumeB9} см³ → ${volumeA9} ${comparisonResult} ${volumeB9}`;\n        explanationKey = 'tasks.volumes.compare_volumes_explanation';\n        explanationParams = { edgeA: edgeA9, edgeB: edgeB9, volumeA: volumeA9, volumeB: volumeB9, result: comparisonResult };\n        answerFormat = \"больше/меньше/равно\";\n        formatKey = 'answerFormats.comparison';\n        break;\n\n      case 10: // Объем составного тела\n        const cubeEdge10 = getRandomInt(3, 5);\n        const prismBase10 = getRandomInt(4, 6);\n        const prismHeight10 = getRandomInt(3, 5);\n        const prismLength10 = getRandomInt(4, 6);\n        const cubeVolume10 = cubeEdge10 * cubeEdge10 * cubeEdge10;\n        const prismVolume10 = Math.round((prismBase10 * prismHeight10 / 2) * prismLength10);\n        const totalVolume10 = cubeVolume10 + prismVolume10;\n        question = `Найдите объем фигуры: куб с ребром ${cubeEdge10} см и треугольная призма с основанием ${prismBase10} см, высотой ${prismHeight10} см и длиной ${prismLength10} см`;\n        translationKey = 'tasks.volumes.composite_volume';\n        translationParams = { cubeEdge: cubeEdge10, prismBase: prismBase10, prismHeight: prismHeight10, prismLength: prismLength10 };\n        answer = totalVolume10.toString();\n        explanation = `Объем куба = ${cubeEdge10}³ = ${cubeVolume10} см³, объем призмы = (${prismBase10} × ${prismHeight10} / 2) × ${prismLength10} = ${prismVolume10} см³, общий объем = ${cubeVolume10} + ${prismVolume10} = ${totalVolume10} см³`;\n        explanationKey = 'tasks.volumes.composite_volume_explanation';\n        explanationParams = { cubeVolume: cubeVolume10, prismVolume: prismVolume10, result: totalVolume10 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey, \n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}