{"ast":null,"code":"// day9-areas.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const areasGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n    switch (type) {\n      case 1:\n        // Площадь квадрата\n        const side1 = getRandomInt(3, 12);\n        const area1 = side1 * side1;\n        question = `Найдите площадь квадрата со стороной ${side1} см`;\n        translationKey = 'tasks.areas.square';\n        translationParams = {\n          side: side1\n        };\n        answer = area1.toString();\n        explanation = `Площадь квадрата = сторона² = ${side1} × ${side1} = ${area1} см²`;\n        explanationKey = 'tasks.areas.square_explanation';\n        explanationParams = {\n          side: side1,\n          result: area1\n        };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n      case 2:\n        // Площадь прямоугольника\n        const length2 = getRandomInt(5, 15);\n        const width2 = getRandomInt(3, 10);\n        const area2 = length2 * width2;\n        question = `Найдите площадь прямоугольника ${length2}×${width2} см`;\n        translationKey = 'tasks.areas.rectangle';\n        translationParams = {\n          length: length2,\n          width: width2\n        };\n        answer = area2.toString();\n        explanation = `Площадь прямоугольника = длина × ширина = ${length2} × ${width2} = ${area2} см²`;\n        explanationKey = 'tasks.areas.rectangle_explanation';\n        explanationParams = {\n          length: length2,\n          width: width2,\n          result: area2\n        };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n      case 3:\n        // Площадь треугольника\n        const base3 = getRandomInt(6, 15);\n        const height3 = getRandomInt(4, 12);\n        const area3 = Math.round(base3 * height3 / 2);\n        question = `Найдите площадь треугольника с основанием ${base3} см и высотой ${height3} см`;\n        translationKey = 'tasks.areas.triangle';\n        translationParams = {\n          base: base3,\n          height: height3\n        };\n        answer = area3.toString();\n        explanation = `Площадь треугольника = (основание × высота) / 2 = (${base3} × ${height3}) / 2 = ${area3} см²`;\n        explanationKey = 'tasks.areas.triangle_explanation';\n        explanationParams = {\n          base: base3,\n          height: height3,\n          result: area3\n        };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n      case 4:\n        // Площадь круга\n        const radius4 = getRandomInt(2, 8);\n        const area4 = Math.round(3.14 * radius4 * radius4);\n        question = `Найдите площадь круга радиусом ${radius4} см (π≈3.14)`;\n        translationKey = 'tasks.areas.circle';\n        translationParams = {\n          radius: radius4\n        };\n        answer = area4.toString();\n        explanation = `Площадь круга = π × радиус² = 3.14 × ${radius4}² = ${area4} см²`;\n        explanationKey = 'tasks.areas.circle_explanation';\n        explanationParams = {\n          radius: radius4,\n          result: area4\n        };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n      case 5:\n        // Площадь параллелограмма\n        const base5 = getRandomInt(5, 12);\n        const height5 = getRandomInt(4, 10);\n        const area5 = base5 * height5;\n        question = `Найдите площадь параллелограмма с основанием ${base5} см и высотой ${height5} см`;\n        translationKey = 'tasks.areas.parallelogram';\n        translationParams = {\n          base: base5,\n          height: height5\n        };\n        answer = area5.toString();\n        explanation = `Площадь параллелограмма = основание × высота = ${base5} × ${height5} = ${area5} см²`;\n        explanationKey = 'tasks.areas.parallelogram_explanation';\n        explanationParams = {\n          base: base5,\n          height: height5,\n          result: area5\n        };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n      case 6:\n        // Площадь ромба\n        const diagonal1_6 = getRandomInt(4, 10);\n        const diagonal2_6 = getRandomInt(6, 12);\n        const area6 = Math.round(diagonal1_6 * diagonal2_6 / 2);\n        question = `Найдите площадь ромба с диагоналями ${diagonal1_6} см и ${diagonal2_6} см`;\n        translationKey = 'tasks.areas.rhombus';\n        translationParams = {\n          diagonal1: diagonal1_6,\n          diagonal2: diagonal2_6\n        };\n        answer = area6.toString();\n        explanation = `Площадь ромба = (диагональ₁ × диагональ₂) / 2 = (${diagonal1_6} × ${diagonal2_6}) / 2 = ${area6} см²`;\n        explanationKey = 'tasks.areas.rhombus_explanation';\n        explanationParams = {\n          diagonal1: diagonal1_6,\n          diagonal2: diagonal2_6,\n          result: area6\n        };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n      case 7:\n        // Площадь трапеции\n        const base1_7 = getRandomInt(5, 10);\n        const base2_7 = getRandomInt(8, 15);\n        const height7 = getRandomInt(4, 8);\n        const area7 = Math.round((base1_7 + base2_7) / 2 * height7);\n        question = `Найдите площадь трапеции с основаниями ${base1_7} см и ${base2_7} см и высотой ${height7} см`;\n        translationKey = 'tasks.areas.trapezoid';\n        translationParams = {\n          base1: base1_7,\n          base2: base2_7,\n          height: height7\n        };\n        answer = area7.toString();\n        explanation = `Площадь трапеции = (основание₁ + основание₂) / 2 × высота = (${base1_7} + ${base2_7}) / 2 × ${height7} = ${area7} см²`;\n        explanationKey = 'tasks.areas.trapezoid_explanation';\n        explanationParams = {\n          base1: base1_7,\n          base2: base2_7,\n          height: height7,\n          result: area7\n        };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n      case 8:\n        // Площадь составной фигуры (прямоугольник + треугольник)\n        const rectWidth8 = getRandomInt(6, 10);\n        const rectHeight8 = getRandomInt(4, 8);\n        const triangleHeight8 = getRandomInt(3, 6);\n        const areaRect8 = rectWidth8 * rectHeight8;\n        const areaTriangle8 = Math.round(rectWidth8 * triangleHeight8 / 2);\n        const totalArea8 = areaRect8 + areaTriangle8;\n        question = `Найдите площадь фигуры: прямоугольник ${rectWidth8}×${rectHeight8} см с треугольником высотой ${triangleHeight8} см наверху`;\n        translationKey = 'tasks.areas.composite_shape';\n        translationParams = {\n          width: rectWidth8,\n          height: rectHeight8,\n          triHeight: triangleHeight8\n        };\n        answer = totalArea8.toString();\n        explanation = `Площадь прямоугольника = ${rectWidth8} × ${rectHeight8} = ${areaRect8} см², площадь треугольника = (${rectWidth8} × ${triangleHeight8}) / 2 = ${areaTriangle8} см², общая площадь = ${areaRect8} + ${areaTriangle8} = ${totalArea8} см²`;\n        explanationKey = 'tasks.areas.composite_shape_explanation';\n        explanationParams = {\n          width: rectWidth8,\n          height: rectHeight8,\n          triHeight: triangleHeight8,\n          rectArea: areaRect8,\n          triArea: areaTriangle8,\n          result: totalArea8\n        };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n      case 9:\n        // Площадь через периметр (квадрат)\n        const perimeter9 = getRandomInt(20, 40);\n        const side9 = perimeter9 / 4;\n        const area9 = side9 * side9;\n        question = `Периметр квадрата равен ${perimeter9} см. Найдите его площадь`;\n        translationKey = 'tasks.areas.square_from_perimeter';\n        translationParams = {\n          perimeter: perimeter9\n        };\n        answer = area9.toString();\n        explanation = `Сторона = периметр / 4 = ${perimeter9} / 4 = ${side9} см, площадь = ${side9} × ${side9} = ${area9} см²`;\n        explanationKey = 'tasks.areas.square_from_perimeter_explanation';\n        explanationParams = {\n          perimeter: perimeter9,\n          side: side9,\n          result: area9\n        };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n      case 10:\n        // Сравнение площадей\n        const sideA10 = getRandomInt(4, 8);\n        const sideB10 = getRandomInt(5, 9);\n        const areaA10 = sideA10 * sideA10;\n        const areaB10 = sideB10 * sideB10;\n        const comparisonResult = areaA10 > areaB10 ? \"больше\" : areaA10 < areaB10 ? \"меньше\" : \"равны\";\n        question = `Сравните площади квадратов со сторонами ${sideA10} см и ${sideB10} см`;\n        translationKey = 'tasks.areas.compare_areas';\n        translationParams = {\n          sideA: sideA10,\n          sideB: sideB10\n        };\n        answer = comparisonResult;\n        explanation = `Площадь₁ = ${sideA10}² = ${areaA10} см², площадь₂ = ${sideB10}² = ${areaB10} см² → ${areaA10} ${comparisonResult} ${areaB10}`;\n        explanationKey = 'tasks.areas.compare_areas_explanation';\n        explanationParams = {\n          side: sideA10,\n          sideB: sideB10,\n          areaA: areaA10,\n          areaB: areaB10,\n          result: comparisonResult\n        };\n        answerFormat = \"больше/меньше/равно\";\n        formatKey = 'answerFormats.comparison';\n        break;\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({\n        question,\n        answer,\n        explanation,\n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey,\n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","areasGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","side1","area1","side","toString","result","length2","width2","area2","width","base3","height3","area3","round","base","height","radius4","area4","radius","base5","height5","area5","diagonal1_6","diagonal2_6","area6","diagonal1","diagonal2","base1_7","base2_7","height7","area7","base1","base2","rectWidth8","rectHeight8","triangleHeight8","areaRect8","areaTriangle8","totalArea8","triHeight","rectArea","triArea","perimeter9","side9","area9","perimeter","sideA10","sideB10","areaA10","areaB10","comparisonResult","sideA","sideB","areaA","areaB","has","add","push"],"sources":["/opt/math-app/frontend/src/taskGenerators/day9-areas.js"],"sourcesContent":["// day9-areas.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const areasGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Площадь квадрата\n        const side1 = getRandomInt(3, 12);\n        const area1 = side1 * side1;\n        question = `Найдите площадь квадрата со стороной ${side1} см`;\n        translationKey = 'tasks.areas.square';\n        translationParams = { side: side1 };\n        answer = area1.toString();\n        explanation = `Площадь квадрата = сторона² = ${side1} × ${side1} = ${area1} см²`;\n        explanationKey = 'tasks.areas.square_explanation';\n        explanationParams = { side: side1, result: area1 };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n\n      case 2: // Площадь прямоугольника\n        const length2 = getRandomInt(5, 15);\n        const width2 = getRandomInt(3, 10);\n        const area2 = length2 * width2;\n        question = `Найдите площадь прямоугольника ${length2}×${width2} см`;\n        translationKey = 'tasks.areas.rectangle';\n        translationParams = { length: length2, width: width2 };\n        answer = area2.toString();\n        explanation = `Площадь прямоугольника = длина × ширина = ${length2} × ${width2} = ${area2} см²`;\n        explanationKey = 'tasks.areas.rectangle_explanation';\n        explanationParams = { length: length2, width: width2, result: area2 };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n\n      case 3: // Площадь треугольника\n        const base3 = getRandomInt(6, 15);\n        const height3 = getRandomInt(4, 12);\n        const area3 = Math.round((base3 * height3) / 2);\n        question = `Найдите площадь треугольника с основанием ${base3} см и высотой ${height3} см`;\n        translationKey = 'tasks.areas.triangle';\n        translationParams = { base: base3, height: height3 };\n        answer = area3.toString();\n        explanation = `Площадь треугольника = (основание × высота) / 2 = (${base3} × ${height3}) / 2 = ${area3} см²`;\n        explanationKey = 'tasks.areas.triangle_explanation';\n        explanationParams = { base: base3, height: height3, result: area3 };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n\n      case 4: // Площадь круга\n        const radius4 = getRandomInt(2, 8);\n        const area4 = Math.round(3.14 * radius4 * radius4);\n        question = `Найдите площадь круга радиусом ${radius4} см (π≈3.14)`;\n        translationKey = 'tasks.areas.circle';\n        translationParams = { radius: radius4 };\n        answer = area4.toString();\n        explanation = `Площадь круга = π × радиус² = 3.14 × ${radius4}² = ${area4} см²`;\n        explanationKey = 'tasks.areas.circle_explanation';\n        explanationParams = { radius: radius4, result: area4 };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n\n      case 5: // Площадь параллелограмма\n        const base5 = getRandomInt(5, 12);\n        const height5 = getRandomInt(4, 10);\n        const area5 = base5 * height5;\n        question = `Найдите площадь параллелограмма с основанием ${base5} см и высотой ${height5} см`;\n        translationKey = 'tasks.areas.parallelogram';\n        translationParams = { base: base5, height: height5 };\n        answer = area5.toString();\n        explanation = `Площадь параллелограмма = основание × высота = ${base5} × ${height5} = ${area5} см²`;\n        explanationKey = 'tasks.areas.parallelogram_explanation';\n        explanationParams = { base: base5, height: height5, result: area5 };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n\n      case 6: // Площадь ромба\n        const diagonal1_6 = getRandomInt(4, 10);\n        const diagonal2_6 = getRandomInt(6, 12);\n        const area6 = Math.round((diagonal1_6 * diagonal2_6) / 2);\n        question = `Найдите площадь ромба с диагоналями ${diagonal1_6} см и ${diagonal2_6} см`;\n        translationKey = 'tasks.areas.rhombus';\n        translationParams = { diagonal1: diagonal1_6, diagonal2: diagonal2_6 };\n        answer = area6.toString();\n        explanation = `Площадь ромба = (диагональ₁ × диагональ₂) / 2 = (${diagonal1_6} × ${diagonal2_6}) / 2 = ${area6} см²`;\n        explanationKey = 'tasks.areas.rhombus_explanation';\n        explanationParams = { diagonal1: diagonal1_6, diagonal2: diagonal2_6, result: area6 };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n\n      case 7: // Площадь трапеции\n        const base1_7 = getRandomInt(5, 10);\n        const base2_7 = getRandomInt(8, 15);\n        const height7 = getRandomInt(4, 8);\n        const area7 = Math.round(((base1_7 + base2_7) / 2) * height7);\n        question = `Найдите площадь трапеции с основаниями ${base1_7} см и ${base2_7} см и высотой ${height7} см`;\n        translationKey = 'tasks.areas.trapezoid';\n        translationParams = { base1: base1_7, base2: base2_7, height: height7 };\n        answer = area7.toString();\n        explanation = `Площадь трапеции = (основание₁ + основание₂) / 2 × высота = (${base1_7} + ${base2_7}) / 2 × ${height7} = ${area7} см²`;\n        explanationKey = 'tasks.areas.trapezoid_explanation';\n        explanationParams = { base1: base1_7, base2: base2_7, height: height7, result: area7 };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n\n      case 8: // Площадь составной фигуры (прямоугольник + треугольник)\n        const rectWidth8 = getRandomInt(6, 10);\n        const rectHeight8 = getRandomInt(4, 8);\n        const triangleHeight8 = getRandomInt(3, 6);\n        const areaRect8 = rectWidth8 * rectHeight8;\n        const areaTriangle8 = Math.round((rectWidth8 * triangleHeight8) / 2);\n        const totalArea8 = areaRect8 + areaTriangle8;\n        question = `Найдите площадь фигуры: прямоугольник ${rectWidth8}×${rectHeight8} см с треугольником высотой ${triangleHeight8} см наверху`;\n        translationKey = 'tasks.areas.composite_shape';\n        translationParams = { width: rectWidth8, height: rectHeight8, triHeight: triangleHeight8 };\n        answer = totalArea8.toString();\n        explanation = `Площадь прямоугольника = ${rectWidth8} × ${rectHeight8} = ${areaRect8} см², площадь треугольника = (${rectWidth8} × ${triangleHeight8}) / 2 = ${areaTriangle8} см², общая площадь = ${areaRect8} + ${areaTriangle8} = ${totalArea8} см²`;\n        explanationKey = 'tasks.areas.composite_shape_explanation';\n        explanationParams = { width: rectWidth8, height: rectHeight8, triHeight: triangleHeight8, rectArea: areaRect8, triArea: areaTriangle8, result: totalArea8 };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n\n      case 9: // Площадь через периметр (квадрат)\n        const perimeter9 = getRandomInt(20, 40);\n        const side9 = perimeter9 / 4;\n        const area9 = side9 * side9;\n        question = `Периметр квадрата равен ${perimeter9} см. Найдите его площадь`;\n        translationKey = 'tasks.areas.square_from_perimeter';\n        translationParams = { perimeter: perimeter9 };\n        answer = area9.toString();\n        explanation = `Сторона = периметр / 4 = ${perimeter9} / 4 = ${side9} см, площадь = ${side9} × ${side9} = ${area9} см²`;\n        explanationKey = 'tasks.areas.square_from_perimeter_explanation';\n        explanationParams = { perimeter: perimeter9, side: side9, result: area9 };\n        answerFormat = \"число (в см²)\";\n        formatKey = 'answerFormats.cm2';\n        break;\n\n      case 10: // Сравнение площадей\n        const sideA10 = getRandomInt(4, 8);\n        const sideB10 = getRandomInt(5, 9);\n        const areaA10 = sideA10 * sideA10;\n        const areaB10 = sideB10 * sideB10;\n        const comparisonResult = areaA10 > areaB10 ? \"больше\" : areaA10 < areaB10 ? \"меньше\" : \"равны\";\n        question = `Сравните площади квадратов со сторонами ${sideA10} см и ${sideB10} см`;\n        translationKey = 'tasks.areas.compare_areas';\n        translationParams = { sideA: sideA10, sideB: sideB10 };\n        answer = comparisonResult;\n        explanation = `Площадь₁ = ${sideA10}² = ${areaA10} см², площадь₂ = ${sideB10}² = ${areaB10} см² → ${areaA10} ${comparisonResult} ${areaB10}`;\n        explanationKey = 'tasks.areas.compare_areas_explanation';\n        explanationParams = { side: sideA10, sideB: sideB10, areaA: areaA10, areaB: areaB10, result: comparisonResult };\n        answerFormat = \"больше/меньше/равно\";\n        formatKey = 'answerFormats.comparison';\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey, \n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}