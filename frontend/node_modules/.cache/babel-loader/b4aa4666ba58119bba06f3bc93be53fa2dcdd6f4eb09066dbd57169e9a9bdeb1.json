{"ast":null,"code":"// day13-symmetry.js\nconst getRandomInt=(min,max)=>Math.floor(Math.random()*(max-min+1))+min;export const symmetryGenerator=(count,t)=>{const tasks=[];const usedQuestions=new Set();while(tasks.length<count){let question,answer,explanation,answerFormat;let translationKey,translationParams,explanationKey,explanationParams,formatKey;let type=getRandomInt(1,10);switch(type){case 1:// Осевая симметрия относительно X\nconst x1=getRandomInt(-4,4);const y1=getRandomInt(-4,4);const symmetricPoint1=\"(\".concat(x1,\", \").concat(-y1,\")\");question=\"\\u041D\\u0430\\u0439\\u0434\\u0438\\u0442\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0443, \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0447\\u043D\\u0443\\u044E \\u0442\\u043E\\u0447\\u043A\\u0435 (\".concat(x1,\", \").concat(y1,\") \\u043E\\u0442\\u043D\\u043E\\u0441\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u043E\\u0441\\u0438 X\");translationKey='tasks.symmetry.axis_x';translationParams={x:x1,y:y1};answer=symmetricPoint1;explanation=\"\\u041F\\u0440\\u0438 \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0438 \\u043E\\u0442\\u043D\\u043E\\u0441\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u043E\\u0441\\u0438 X \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u0430 y \\u043C\\u0435\\u043D\\u044F\\u0435\\u0442 \\u0437\\u043D\\u0430\\u043A: (\".concat(x1,\", \").concat(y1,\") \\u2192 \").concat(symmetricPoint1);explanationKey='tasks.symmetry.axis_x_explanation';explanationParams={x:x1,y:y1,result:symmetricPoint1};answerFormat=\"координаты (x,y)\";formatKey='answerFormats.coordinate';break;case 2:// Осевая симметрия относительно Y\nconst x2=getRandomInt(-4,4);const y2=getRandomInt(-4,4);const symmetricPoint2=\"(\".concat(-x2,\", \").concat(y2,\")\");question=\"\\u041D\\u0430\\u0439\\u0434\\u0438\\u0442\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0443, \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0447\\u043D\\u0443\\u044E \\u0442\\u043E\\u0447\\u043A\\u0435 (\".concat(x2,\", \").concat(y2,\") \\u043E\\u0442\\u043D\\u043E\\u0441\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u043E\\u0441\\u0438 Y\");translationKey='tasks.symmetry.axis_y';translationParams={x:x2,y:y2};answer=symmetricPoint2;explanation=\"\\u041F\\u0440\\u0438 \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0438 \\u043E\\u0442\\u043D\\u043E\\u0441\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u043E\\u0441\\u0438 Y \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u0430 x \\u043C\\u0435\\u043D\\u044F\\u0435\\u0442 \\u0437\\u043D\\u0430\\u043A: (\".concat(x2,\", \").concat(y2,\") \\u2192 \").concat(symmetricPoint2);explanationKey='tasks.symmetry.axis_y_explanation';explanationParams={x:x2,y:y2,result:symmetricPoint2};answerFormat=\"координаты (x,y)\";formatKey='answerFormats.coordinate';break;case 3:// Центральная симметрия\nconst x3=getRandomInt(-4,4);const y3=getRandomInt(-4,4);const symmetricPoint3=\"(\".concat(-x3,\", \").concat(-y3,\")\");question=\"\\u041D\\u0430\\u0439\\u0434\\u0438\\u0442\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0443, \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0447\\u043D\\u0443\\u044E \\u0442\\u043E\\u0447\\u043A\\u0435 (\".concat(x3,\", \").concat(y3,\") \\u043E\\u0442\\u043D\\u043E\\u0441\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\");translationKey='tasks.symmetry.central';translationParams={x:x3,y:y3};answer=symmetricPoint3;explanation=\"\\u041F\\u0440\\u0438 \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0438 \\u043E\\u0442\\u043D\\u043E\\u0441\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442 \\u043E\\u0431\\u0435 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B \\u043C\\u0435\\u043D\\u044F\\u044E\\u0442 \\u0437\\u043D\\u0430\\u043A: (\".concat(x3,\", \").concat(y3,\") \\u2192 \").concat(symmetricPoint3);explanationKey='tasks.symmetry.central_explanation';explanationParams={x:x3,y:y3,result:symmetricPoint3};answerFormat=\"координаты (x,y)\";formatKey='answerFormats.coordinate';break;case 4:// Симметрия относительно точки\nconst x4=getRandomInt(-3,3);const y4=getRandomInt(-3,3);const centerX4=getRandomInt(-2,2);const centerY4=getRandomInt(-2,2);const symX4=2*centerX4-x4;const symY4=2*centerY4-y4;const symmetricPoint4=\"(\".concat(symX4,\", \").concat(symY4,\")\");question=\"\\u041D\\u0430\\u0439\\u0434\\u0438\\u0442\\u0435 \\u0442\\u043E\\u0447\\u043A\\u0443, \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0447\\u043D\\u0443\\u044E \\u0442\\u043E\\u0447\\u043A\\u0435 (\".concat(x4,\", \").concat(y4,\") \\u043E\\u0442\\u043D\\u043E\\u0441\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u0442\\u043E\\u0447\\u043A\\u0438 (\").concat(centerX4,\", \").concat(centerY4,\")\");translationKey='tasks.symmetry.point';translationParams={x:x4,y:y4,centerX:centerX4,centerY:centerY4};answer=symmetricPoint4;explanation=\"x' = 2 \\xD7 \".concat(centerX4,\" - \").concat(x4,\" = \").concat(symX4,\", y' = 2 \\xD7 \").concat(centerY4,\" - \").concat(y4,\" = \").concat(symY4);explanationKey='tasks.symmetry.point_explanation';explanationParams={x:x4,y:y4,centerX:centerX4,centerY:centerY4,resultX:symX4,resultY:symY4,result:symmetricPoint4};answerFormat=\"координаты (x,y)\";formatKey='answerFormats.coordinate';break;case 5:// Количество осей симметрии фигуры\nconst shapes5=[{shape:\"равносторонний треугольник\",axes:3},{shape:\"квадрат\",axes:4},{shape:\"прямоугольник (не квадрат)\",axes:2},{shape:\"правильный пятиугольник\",axes:5},{shape:\"окружность\",axes:\"бесконечное\"}];const shape5=shapes5[getRandomInt(0,shapes5.length-1)];question=\"\\u0421\\u043A\\u043E\\u043B\\u044C\\u043A\\u043E \\u043E\\u0441\\u0435\\u0439 \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0438 \\u0443 \".concat(shape5.shape,\"?\");translationKey='tasks.symmetry.axes_count';translationParams={shape:shape5.shape};answer=shape5.axes.toString();explanation=\"\".concat(shape5.shape,\" \\u0438\\u043C\\u0435\\u0435\\u0442 \").concat(shape5.axes,\" \").concat(typeof shape5.axes==='number'?'оси':'количество',\" \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0438\");explanationKey='tasks.symmetry.axes_count_explanation';explanationParams={shape:shape5.shape,result:shape5.axes};answerFormat=\"число\";formatKey='answerFormats.number';break;case 6:// Симметричные фигуры в природе\nconst naturalObjects6=[{object:\"лист дерева\",symmetry:\"билатеральная\"},{object:\"снежинка\",symmetry:\"радиальная\"},{object极:\"морская звезда\",symmetry:\"радиальная\"},{object:\"бабочка\",symmetry:\"билатеральная\"},{object:\"солнце\",symmetry:\"радиальная\"}];const object6=naturalObjects6[getRandomInt(0,naturalObjects6.length-1)];question=\"\\u041A\\u0430\\u043A\\u043E\\u0439 \\u0442\\u0438\\u043F \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0438 \\u0443 \".concat(object6.object,\"?\");translationKey='tasks.symmetry.nature';translationParams={object:object6.object};answer=object6.symmetry;explanation=\"\".concat(object6.object,\" \\u0438\\u043C\\u0435\\u0435\\u0442 \").concat(object6.symmetry,\" \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u044E\");explanationKey='tasks.symmetry.nature_explanation';explanationParams={object:object6.object,result:object6.symmetry};answerFormat=\"тип симметрии\";formatKey='answerFormats.symmetry_type';break;case 7:// Построение симметричной фигуры\nconst figure7=\"треугольник ABC\";const axis7=[\"оси X\",\"оси Y\",\"начала координат\"][getRandomInt(0,2)];const resultFigure7=\"треугольник A'B'C'\";question=\"\\u041F\\u043E\\u0441\\u0442\\u0440\\u043E\\u0439\\u0442\\u0435 \\u0444\\u0438\\u0433\\u0443\\u0440\\u0443, \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0447\\u043D\\u0443\\u044E \".concat(figure7,\" \\u043E\\u0442\\u043D\\u043E\\u0441\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \").concat(axis7);translationKey='tasks.symmetry.construct';translationParams={figure:figure7,axis:axis7};answer=resultFigure7;explanation=\"\\u041A\\u0430\\u0436\\u0434\\u0430\\u044F \\u0442\\u043E\\u0447\\u043A\\u0430 \".concat(figure7,\" \\u043E\\u0442\\u0440\\u0430\\u0436\\u0430\\u0435\\u0442\\u0441\\u044F \\u043E\\u0442\\u043D\\u043E\\u0441\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \").concat(axis7);explanationKey='tasks.symmetry.construct_explanation';explanationParams={figure:figure7,axis:axis7,result:resultFigure7};answerFormat=\"название фигуры\";formatKey='answerFormats.figure_name';break;case 8:// Определение центра симметрии\nconst points8=[{x:2,y:3},{x:4,y:1},{x:6,y:-1}];const centerX8=4;const centerY8=1;const centerPoint8=\"(\".concat(centerX8,\", \").concat(centerY8,\")\");question=\"\\u0422\\u043E\\u0447\\u043A\\u0438 \".concat(points8.map(p=>\"(\".concat(p.x,\",\").concat(p.y,\")\")).join(', '),\" \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0447\\u043D\\u044B. \\u041D\\u0430\\u0439\\u0434\\u0438\\u0442\\u0435 \\u0446\\u0435\\u043D\\u0442\\u0440 \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0438\");translationKey='tasks.symmetry.find_center';translationParams={points:points8.map(p=>\"(\".concat(p.x,\",\").concat(p.y,\")\")).join(', ')};answer=centerPoint8;explanation=\"\\u0426\\u0435\\u043D\\u0442\\u0440 \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0438 \\u043D\\u0430\\u0445\\u043E\\u0434\\u0438\\u0442\\u0441\\u044F \\u043F\\u043E\\u0441\\u0435\\u0440\\u0435\\u0434\\u0438\\u043D\\u0435 \\u043C\\u0435\\u0436\\u0434\\u0443 \\u0441\\u043E\\u043E\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0443\\u044E\\u0449\\u0438\\u043C\\u0438 \\u0442\\u043E\\u0447\\u043A\\u0430\\u043C\\u0438\";explanationKey='tasks.symmetry.find_center_explanation';explanationParams={points:points8.map(p=>\"(\".concat(p.x,\",\").concat(p.y,\")\")).join(', '),result:centerPoint8};answerFormat=\"координаты (x,y)\";formatKey='answerFormats.coordinate';break;case 9:// Симметрия в буквах\nconst letters9=[{letter:\"A\",symmetry:\"вертикальная\"},{letter:\"B\",symmetry:\"вертикальная\"},{letter:\"H\",symmetry:\"вертикальная и горизонтальная\"},{letter:\"O\",symmetry:\"вертикальная и горизонтальная\"},{letter:\"M\",symmetry:\"вертикальная\"}];const letter9=letters9[getRandomInt(0,letters9.length-1)];question=\"\\u041A\\u0430\\u043A\\u0430\\u044F \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u044F \\u0443 \\u0431\\u0443\\u043A\\u0432\\u044B \\\"\".concat(letter9.letter,\"\\\"?\");translationKey='tasks.symmetry.letters';translationParams={letter:letter9.letter};answer=letter9.symmetry;explanation=\"\\u0411\\u0443\\u043A\\u0432\\u0430 \\\"\".concat(letter9.letter,\"\\\" \\u0438\\u043C\\u0435\\u0435\\u0442 \").concat(letter9.symmetry,\" \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u044E\");explanationKey='tasks.symmetry.letters_explanation';explanationParams={letter:letter9.letter,result:letter9.symmetry};answerFormat=\"тип симметрии\";formatKey='answerFormats.symmetry_type';break;case 10:// Симметричные выражения\nconst a10=getRandomInt(1,5);const b10=getRandomInt(1,5);question=\"\\u042F\\u0432\\u043B\\u044F\\u044E\\u0442\\u0441\\u044F \\u043B\\u0438 \\u0432\\u044B\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F \".concat(a10,\"x + \").concat(b10,\"y \\u0438 \").concat(b10,\"x + \").concat(a10,\"y \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0447\\u043D\\u044B\\u043C\\u0438?\");translationKey='tasks.symmetry.expression';translationParams={a:a10,b:b10};answer=\"да\";explanation=\"\\u0412\\u044B\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F \\u0441\\u0438\\u043C\\u043C\\u0435\\u0442\\u0440\\u0438\\u0447\\u043D\\u044B \\u043E\\u0442\\u043D\\u043E\\u0441\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u0437\\u0430\\u043C\\u0435\\u043D\\u044B x \\u0438 y: \".concat(a10,\"x + \").concat(b10,\"y \\u2192 \").concat(b10,\"x + \").concat(a10,\"y\");explanationKey='tasks.symmetry.expression_explanation';explanationParams={a:a10,b:b10,result:\"да\"};answerFormat=\"да/нет\";formatKey='answerFormats.yes_no';break;default:type=getRandomInt(1,10);continue;}if(!usedQuestions.has(question)){usedQuestions.add(question);tasks.push({question,answer,explanation,answerFormat,translationKey,translationParams,explanationKey,explanationParams,formatKey});}}return tasks;};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","symmetryGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","x1","y1","symmetricPoint1","concat","x","y","result","x2","y2","symmetricPoint2","x3","y3","symmetricPoint3","x4","y4","centerX4","centerY4","symX4","symY4","symmetricPoint4","centerX","centerY","resultX","resultY","shapes5","shape","axes","shape5","toString","naturalObjects6","object","symmetry","object极","object6","figure7","axis7","resultFigure7","figure","axis","points8","centerX8","centerY8","centerPoint8","map","p","join","points","letters9","letter","letter9","a10","b10","a","b","has","add","push"],"sources":["/opt/math-app/frontend/src/taskGenerators/day13-symmetry.js"],"sourcesContent":["// day13-symmetry.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const symmetryGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Осевая симметрия относительно X\n        const x1 = getRandomInt(-4, 4);\n        const y1 = getRandomInt(-4, 4);\n        const symmetricPoint1 = `(${x1}, ${-y1})`;\n        question = `Найдите точку, симметричную точке (${x1}, ${y1}) относительно оси X`;\n        translationKey = 'tasks.symmetry.axis_x';\n        translationParams = { x: x1, y: y1 };\n        answer = symmetricPoint1;\n        explanation = `При симметрии относительно оси X координата y меняет знак: (${x1}, ${y1}) → ${symmetricPoint1}`;\n        explanationKey = 'tasks.symmetry.axis_x_explanation';\n        explanationParams = { x: x1, y: y1, result: symmetricPoint1 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 2: // Осевая симметрия относительно Y\n        const x2 = getRandomInt(-4, 4);\n        const y2 = getRandomInt(-4, 4);\n        const symmetricPoint2 = `(${-x2}, ${y2})`;\n        question = `Найдите точку, симметричную точке (${x2}, ${y2}) относительно оси Y`;\n        translationKey = 'tasks.symmetry.axis_y';\n        translationParams = { x: x2, y: y2 };\n        answer = symmetricPoint2;\n        explanation = `При симметрии относительно оси Y координата x меняет знак: (${x2}, ${y2}) → ${symmetricPoint2}`;\n        explanationKey = 'tasks.symmetry.axis_y_explanation';\n        explanationParams = { x: x2, y: y2, result: symmetricPoint2 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 3: // Центральная симметрия\n        const x3 = getRandomInt(-4, 4);\n        const y3 = getRandomInt(-4, 4);\n        const symmetricPoint3 = `(${-x3}, ${-y3})`;\n        question = `Найдите точку, симметричную точке (${x3}, ${y3}) относительно начала координат`;\n        translationKey = 'tasks.symmetry.central';\n        translationParams = { x: x3, y: y3 };\n        answer = symmetricPoint3;\n        explanation = `При симметрии относительно начала координат обе координаты меняют знак: (${x3}, ${y3}) → ${symmetricPoint3}`;\n        explanationKey = 'tasks.symmetry.central_explanation';\n        explanationParams = { x: x3, y: y3, result: symmetricPoint3 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 4: // Симметрия относительно точки\n        const x4 = getRandomInt(-3, 3);\n        const y4 = getRandomInt(-3, 3);\n        const centerX4 = getRandomInt(-2, 2);\n        const centerY4 = getRandomInt(-2, 2);\n        const symX4 = 2 * centerX4 - x4;\n        const symY4 = 2 * centerY4 - y4;\n        const symmetricPoint4 = `(${symX4}, ${symY4})`;\n        question = `Найдите точку, симметричную точке (${x4}, ${y4}) относительно точки (${centerX4}, ${centerY4})`;\n        translationKey = 'tasks.symmetry.point';\n        translationParams = { x: x4, y: y4, centerX: centerX4, centerY: centerY4 };\n        answer = symmetricPoint4;\n        explanation = `x' = 2 × ${centerX4} - ${x4} = ${symX4}, y' = 2 × ${centerY4} - ${y4} = ${symY4}`;\n        explanationKey = 'tasks.symmetry.point_explanation';\n        explanationParams = { x: x4, y: y4, centerX: centerX4, centerY: centerY4, resultX: symX4, resultY: symY4, result: symmetricPoint4 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 5: // Количество осей симметрии фигуры\n        const shapes5 = [\n          { shape: \"равносторонний треугольник\", axes: 3 },\n          { shape: \"квадрат\", axes: 4 },\n          { shape: \"прямоугольник (не квадрат)\", axes: 2 },\n          { shape: \"правильный пятиугольник\", axes: 5 },\n          { shape: \"окружность\", axes: \"бесконечное\" }\n        ];\n        const shape5 = shapes5[getRandomInt(0, shapes5.length - 1)];\n        question = `Сколько осей симметрии у ${shape5.shape}?`;\n        translationKey = 'tasks.symmetry.axes_count';\n        translationParams = { shape: shape5.shape };\n        answer = shape5.axes.toString();\n        explanation = `${shape5.shape} имеет ${shape5.axes} ${typeof shape5.axes === 'number' ? 'оси' : 'количество'} симметрии`;\n        explanationKey = 'tasks.symmetry.axes_count_explanation';\n        explanationParams = { shape: shape5.shape, result: shape5.axes };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 6: // Симметричные фигуры в природе\n        const naturalObjects6 = [\n          { object: \"лист дерева\", symmetry: \"билатеральная\" },\n          { object: \"снежинка\", symmetry: \"радиальная\" },\n          { object极: \"морская звезда\", symmetry: \"радиальная\" },\n          { object: \"бабочка\", symmetry: \"билатеральная\" },\n          { object: \"солнце\", symmetry: \"радиальная\" }\n        ];\n        const object6 = naturalObjects6[getRandomInt(0, naturalObjects6.length - 1)];\n        question = `Какой тип симметрии у ${object6.object}?`;\n        translationKey = 'tasks.symmetry.nature';\n        translationParams = { object: object6.object };\n        answer = object6.symmetry;\n        explanation = `${object6.object} имеет ${object6.symmetry} симметрию`;\n        explanationKey = 'tasks.symmetry.nature_explanation';\n        explanationParams = { object: object6.object, result: object6.symmetry };\n        answerFormat = \"тип симметрии\";\n        formatKey = 'answerFormats.symmetry_type';\n        break;\n\n      case 7: // Построение симметричной фигуры\n        const figure7 = \"треугольник ABC\";\n        const axis7 = [\"оси X\", \"оси Y\", \"начала координат\"][getRandomInt(0, 2)];\n        const resultFigure7 = \"треугольник A'B'C'\";\n        question = `Постройте фигуру, симметричную ${figure7} относительно ${axis7}`;\n        translationKey = 'tasks.symmetry.construct';\n        translationParams = { figure: figure7, axis: axis7 };\n        answer = resultFigure7;\n        explanation = `Каждая точка ${figure7} отражается относительно ${axis7}`;\n        explanationKey = 'tasks.symmetry.construct_explanation';\n        explanationParams = { figure: figure7, axis: axis7, result: resultFigure7 };\n        answerFormat = \"название фигуры\";\n        formatKey = 'answerFormats.figure_name';\n        break;\n\n      case 8: // Определение центра симметрии\n        const points8 = [\n          { x: 2, y: 3 },\n          { x: 4, y: 1 },\n          { x: 6, y: -1 }\n        ];\n        const centerX8 = 4;\n        const centerY8 = 1;\n        const centerPoint8 = `(${centerX8}, ${centerY8})`;\n        question = `Точки ${points8.map(p => `(${p.x},${p.y})`).join(', ')} симметричны. Найдите центр симметрии`;\n        translationKey = 'tasks.symmetry.find_center';\n        translationParams = { points: points8.map(p => `(${p.x},${p.y})`).join(', ') };\n        answer = centerPoint8;\n        explanation = `Центр симметрии находится посередине между соответствующими точками`;\n        explanationKey = 'tasks.symmetry.find_center_explanation';\n        explanationParams = { points: points8.map(p => `(${p.x},${p.y})`).join(', '), result: centerPoint8 };\n        answerFormat = \"координаты (x,y)\";\n        formatKey = 'answerFormats.coordinate';\n        break;\n\n      case 9: // Симметрия в буквах\n        const letters9 = [\n          { letter: \"A\", symmetry: \"вертикальная\" },\n          { letter: \"B\", symmetry: \"вертикальная\" },\n          { letter: \"H\", symmetry: \"вертикальная и горизонтальная\" },\n          { letter: \"O\", symmetry: \"вертикальная и горизонтальная\" },\n          { letter: \"M\", symmetry: \"вертикальная\" }\n        ];\n        const letter9 = letters9[getRandomInt(0, letters9.length - 1)];\n        question = `Какая симметрия у буквы \"${letter9.letter}\"?`;\n        translationKey = 'tasks.symmetry.letters';\n        translationParams = { letter: letter9.letter };\n        answer = letter9.symmetry;\n        explanation = `Буква \"${letter9.letter}\" имеет ${letter9.symmetry} симметрию`;\n        explanationKey = 'tasks.symmetry.letters_explanation';\n        explanationParams = { letter: letter9.letter, result: letter9.symmetry };\n        answerFormat = \"тип симметрии\";\n        formatKey = 'answerFormats.symmetry_type';\n        break;\n\n      case 10: // Симметричные выражения\n        const a10 = getRandomInt(1, 5);\n        const b10 = getRandomInt(1, 5);\n        question = `Являются ли выражения ${a10}x + ${b10}y и ${b10}x + ${a10}y симметричными?`;\n        translationKey = 'tasks.symmetry.expression';\n        translationParams = { a: a10, b: b10 };\n        answer = \"да\";\n        explanation = `Выражения симметричны относительно замены x и y: ${a10}x + ${b10}y → ${b10}x + ${a10}y`;\n        explanationKey = 'tasks.symmetry.expression_explanation';\n        explanationParams = { a: a10, b: b10, result: \"да\" };\n        answerFormat = \"да/нет\";\n        formatKey = 'answerFormats.yes_no';\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey, \n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}