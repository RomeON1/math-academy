{"ast":null,"code":"// day1-fractions.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\n// Генераторы задач день 1\nexport const fractionsGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n    switch (type) {\n      case 1:\n        // Простые дроби\n        const num = getRandomInt(1, 5);\n        const den = getRandomInt(2, 8);\n        question = `Сократите дробь: ${num * 2}/${den * 2}`;\n        translationKey = 'tasks.fractions.reduce';\n        translationParams = {\n          numerator: num * 2,\n          denominator: den * 2\n        };\n        answer = `${num}/${den}`;\n        explanation = `Делим числитель и знаменатель на 2: ${num * 2}/${den * 2} = ${num}/${den}`;\n        explanationKey = 'tasks.fractions.reduce_explanation';\n        explanationParams = {\n          numerator: num * 2,\n          denominator: den * 2,\n          result: `${num}/${den}`\n        };\n        answerFormat = \"дробь (например: 3/4)\";\n        formatKey = 'answerFormats.fraction';\n        break;\n      case 2:\n        // Проценты\n        const percent = getRandomInt(10, 90);\n        const number = getRandomInt(20, 200);\n        const result = Math.round(percent / 100 * number);\n        question = `Найдите ${percent}% от числа ${number}`;\n        translationKey = 'tasks.fractions.percentage_of';\n        translationParams = {\n          percent,\n          number\n        };\n        answer = result.toString();\n        explanation = `${percent}% от ${number} = (${percent} × ${number}) / 100 = ${result}`;\n        explanationKey = 'tasks.fractions.percentage_of_explanation';\n        explanationParams = {\n          percent,\n          number,\n          result\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 3:\n        // Сложение дробей\n        const a = getRandomInt(1, 4);\n        const b = getRandomInt(1, 4);\n        const sum = a + b;\n        question = `Сложите дроби: ${a}/6 + ${b}/6`;\n        translationKey = 'tasks.fractions.addition';\n        translationParams = {\n          a,\n          b\n        };\n        answer = `${sum}/6`;\n        explanation = `При одинаковых знаменателях складываем числители: ${a} + ${b} = ${sum}`;\n        explanationKey = 'tasks.fractions.addition_explanation';\n        explanationParams = {\n          a,\n          b,\n          result: sum\n        };\n        answerFormat = \"дробь (например: 5/6)\";\n        formatKey = 'answerFormats.fraction';\n        break;\n      case 4:\n        // Вычитание дробей\n        const x = getRandomInt(3, 7);\n        const y = getRandomInt(1, 3);\n        const diff = x - y;\n        question = `Вычтите дроби: ${x}/8 - ${y}/8`;\n        translationKey = 'tasks.fractions.subtraction';\n        translationParams = {\n          x,\n          y\n        };\n        answer = `${diff}/8`;\n        explanation = `При одинаковых знаменателях вычитаем числители: ${x} - ${y} = ${diff}`;\n        explanationKey = 'tasks.fractions.subtraction_explanation';\n        explanationParams = {\n          x,\n          y,\n          result: diff\n        };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n      case 5:\n        // Перевод процентов в дроби\n        const p = getRandomInt(5, 95);\n        question = `Представьте ${p}% в виде несократимой дроби`;\n        translationKey = 'tasks.fractions.percentage_to_fraction';\n        translationParams = {\n          p\n        };\n        answer = `${p}/100`;\n        explanation = `${p}% = ${p}/100`;\n        explanationKey = 'tasks.fractions.percentage_to_fraction_explanation';\n        explanationParams = {\n          p\n        };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n      case 6:\n        // Нахождение числа по проценту\n        const perc = getRandomInt(10, 40);\n        const value = getRandomInt(15, 60);\n        const total = Math.round(value * 100 / perc);\n        question = `Если ${perc}% числа равны ${value}, найдите всё число`;\n        translationKey = 'tasks.fractions.find_number_by_percentage';\n        translationParams = {\n          perc,\n          value\n        };\n        answer = total.toString();\n        explanation = `100% = (${value} × 100) / ${perc} = ${total}`;\n        explanationKey = 'tasks.fractions.find_number_by_percentage_explanation';\n        explanationParams = {\n          perc,\n          value,\n          total\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 7:\n        // Сравнение дробей\n        const a2 = getRandomInt(1, 5);\n        const b2 = getRandomInt(2, 8);\n        const c2 = getRandomInt(1, 5);\n        const d2 = getRandomInt(2, 8);\n        const result1 = (a2 / b2).toFixed(3);\n        const result2 = (c2 / d2).toFixed(3);\n        question = `Сравните дроби: ${a2}/${b2} и ${c2}/${d2}`;\n        translationKey = 'tasks.fractions.compare_fractions';\n        translationParams = {\n          a: a2,\n          b: b2,\n          c: c2,\n          d: d2\n        };\n        answer = a2 / b2 > c2 / d2 ? \"больше\" : a2 / b2 < c2 / d2 ? \"меньше\" : \"равны\";\n        explanation = `Приводим к общему знаменателю: ${a2}/${b2} = ${result1}, ${c2}/${d2} = ${result2}`;\n        explanationKey = 'tasks.fractions.compare_fractions_explanation';\n        explanationParams = {\n          a: a2,\n          b: b2,\n          c: c2,\n          d: d2,\n          result1,\n          result2\n        };\n        answerFormat = \"больше/меньше/равно\";\n        formatKey = 'answerFormats.comparison';\n        break;\n      case 8:\n        // Смешанное число в неправильную дробь\n        const whole8 = getRandomInt(1, 5);\n        const num8 = getRandomInt(1, 4);\n        const den8 = getRandomInt(2, 8);\n        const improper8 = whole8 * den8 + num8;\n        question = `Переведите смешанное число ${whole8} ${num8}/${den8} в неправильную дробь`;\n        translationKey = 'tasks.fractions.mixed_to_improper';\n        translationParams = {\n          whole: whole8,\n          num: num8,\n          den: den8\n        };\n        answer = `${improper8}/${den8}`;\n        explanation = `${whole8} ${num8}/${den8} = (${whole8} × ${den8} + ${num8}) / ${den8} = ${improper8}/${den8}`;\n        explanationKey = 'tasks.fractions.mixed_to_improper_explanation';\n        explanationParams = {\n          whole: whole8,\n          num: num8,\n          den: den8,\n          result: `${improper8}/${den8}`\n        };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n      case 9:\n        // Неправильная дробь в смешанное число\n        const numerator9 = getRandomInt(7, 20);\n        const denominator9 = getRandomInt(2, 6);\n        const wholePart9 = Math.floor(numerator9 / denominator9);\n        const remainder9 = numerator9 % denominator9;\n        question = `Переведите неправильную дробь ${numerator9}/${denominator9} в смешанное число`;\n        translationKey = 'tasks.fractions.improper_to_mixed';\n        translationParams = {\n          num: numerator9,\n          den: denominator9\n        };\n        answer = remainder9 === 0 ? `${wholePart9}` : `${wholePart9} ${remainder9}/${denominator9}`;\n        explanation = `${numerator9}/${denominator9} = ${wholePart9} целых и ${remainder9}/${denominator9}`;\n        explanationKey = 'tasks.fractions.improper_to_mixed_explanation';\n        explanationParams = {\n          num: numerator9,\n          den: denominator9,\n          whole: wholePart9,\n          remainder: remainder9\n        };\n        answerFormat = \"смешанное число (например: 2 3/4)\";\n        formatKey = 'answerFormats.mixed_number';\n        break;\n      case 10:\n        // Умножение дробей\n        const a10 = getRandomInt(1, 4);\n        const b10 = getRandomInt(2, 6);\n        const c10 = getRandomInt(1, 4);\n        const d10 = getRandomInt(2, 6);\n        const resNum10 = a10 * c10;\n        const resDen10 = b10 * d10;\n        question = `Умножьте дроби: ${a10}/${b10} × ${c10}/${d10}`;\n        translationKey = 'tasks.fractions.multiply_fractions';\n        translationParams = {\n          a: a10,\n          b: b10,\n          c: c10,\n          d: d10\n        };\n        answer = `${resNum10}/${resDen10}`;\n        explanation = `Умножаем числители и знаменатели: (${a10} × ${c10}) / (${b10} × ${d10}) = ${resNum10}/${resDen10}`;\n        explanationKey = 'tasks.fractions.multiply_fractions_explanation';\n        explanationParams = {\n          a: a10,\n          b: b10,\n          c: c10,\n          d: d10,\n          result: `${resNum10}/${resDen10}`\n        };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({\n        question,\n        answer,\n        explanation,\n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey,\n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","fractionsGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","num","den","numerator","denominator","result","percent","number","round","toString","a","b","sum","x","y","diff","p","perc","value","total","a2","b2","c2","d2","result1","toFixed","result2","c","d","whole8","num8","den8","improper8","whole","numerator9","denominator9","wholePart9","remainder9","remainder","a10","b10","c10","d10","resNum10","resDen10","has","add","push"],"sources":["/opt/math-app/frontend/src/taskGenerators/day1-fractions.js"],"sourcesContent":["// day1-fractions.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\n// Генераторы задач день 1\nexport const fractionsGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Простые дроби\n        const num = getRandomInt(1, 5);\n        const den = getRandomInt(2, 8);\n        question = `Сократите дробь: ${num * 2}/${den * 2}`;\n        translationKey = 'tasks.fractions.reduce';\n        translationParams = { numerator: num * 2, denominator: den * 2 };\n        answer = `${num}/${den}`;\n        explanation = `Делим числитель и знаменатель на 2: ${num * 2}/${den * 2} = ${num}/${den}`;\n        explanationKey = 'tasks.fractions.reduce_explanation';\n        explanationParams = { numerator: num * 2, denominator: den * 2, result: `${num}/${den}` };\n        answerFormat = \"дробь (например: 3/4)\";\n        formatKey = 'answerFormats.fraction';\n        break;\n\n      case 2: // Проценты\n        const percent = getRandomInt(10, 90);\n        const number = getRandomInt(20, 200);\n        const result = Math.round((percent / 100) * number);\n        question = `Найдите ${percent}% от числа ${number}`;\n        translationKey = 'tasks.fractions.percentage_of';\n        translationParams = { percent, number };\n        answer = result.toString();\n        explanation = `${percent}% от ${number} = (${percent} × ${number}) / 100 = ${result}`;\n        explanationKey = 'tasks.fractions.percentage_of_explanation';\n        explanationParams = { percent, number, result };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 3: // Сложение дробей\n        const a = getRandomInt(1, 4);\n        const b = getRandomInt(1, 4);\n        const sum = a + b;\n        question = `Сложите дроби: ${a}/6 + ${b}/6`;\n        translationKey = 'tasks.fractions.addition';\n        translationParams = { a, b };\n        answer = `${sum}/6`;\n        explanation = `При одинаковых знаменателях складываем числители: ${a} + ${b} = ${sum}`;\n        explanationKey = 'tasks.fractions.addition_explanation';\n        explanationParams = { a, b, result: sum };\n        answerFormat = \"дробь (например: 5/6)\";\n        formatKey = 'answerFormats.fraction';\n        break;\n\n      case 4: // Вычитание дробей\n        const x = getRandomInt(3, 7);\n        const y = getRandomInt(1, 3);\n        const diff = x - y;\n        question = `Вычтите дроби: ${x}/8 - ${y}/8`;\n        translationKey = 'tasks.fractions.subtraction';\n        translationParams = { x, y };\n        answer = `${diff}/8`;\n        explanation = `При одинаковых знаменателях вычитаем числители: ${x} - ${y} = ${diff}`;\n        explanationKey = 'tasks.fractions.subtraction_explanation';\n        explanationParams = { x, y, result: diff };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n\n      case 5: // Перевод процентов в дроби\n        const p = getRandomInt(5, 95);\n        question = `Представьте ${p}% в виде несократимой дроби`;\n        translationKey = 'tasks.fractions.percentage_to_fraction';\n        translationParams = { p };\n        answer = `${p}/100`;\n        explanation = `${p}% = ${p}/100`;\n        explanationKey = 'tasks.fractions.percentage_to_fraction_explanation';\n        explanationParams = { p };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n\n      case 6: // Нахождение числа по проценту\n        const perc = getRandomInt(10, 40);\n        const value = getRandomInt(15, 60);\n        const total = Math.round((value * 100) / perc);\n        question = `Если ${perc}% числа равны ${value}, найдите всё число`;\n        translationKey = 'tasks.fractions.find_number_by_percentage';\n        translationParams = { perc, value };\n        answer = total.toString();\n        explanation = `100% = (${value} × 100) / ${perc} = ${total}`;\n        explanationKey = 'tasks.fractions.find_number_by_percentage_explanation';\n        explanationParams = { perc, value, total };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 7: // Сравнение дробей\n        const a2 = getRandomInt(1, 5);\n        const b2 = getRandomInt(2, 8);\n        const c2 = getRandomInt(1, 5);\n        const d2 = getRandomInt(2, 8);\n        const result1 = (a2 / b2).toFixed(3);\n        const result2 = (c2 / d2).toFixed(3);\n        question = `Сравните дроби: ${a2}/${b2} и ${c2}/${d2}`;\n        translationKey = 'tasks.fractions.compare_fractions';\n        translationParams = { a: a2, b: b2, c: c2, d: d2 };\n        answer = a2/b2 > c2/d2 ? \"больше\" : a2/b2 < c2/d2 ? \"меньше\" : \"равны\";\n        explanation = `Приводим к общему знаменателю: ${a2}/${b2} = ${result1}, ${c2}/${d2} = ${result2}`;\n        explanationKey = 'tasks.fractions.compare_fractions_explanation';\n        explanationParams = { a: a2, b: b2, c: c2, d: d2, result1, result2 };\n        answerFormat = \"больше/меньше/равно\";\n        formatKey = 'answerFormats.comparison';\n        break;\n\n      case 8: // Смешанное число в неправильную дробь\n        const whole8 = getRandomInt(1, 5);\n        const num8 = getRandomInt(1, 4);\n        const den8 = getRandomInt(2, 8);\n        const improper8 = whole8 * den8 + num8;\n        question = `Переведите смешанное число ${whole8} ${num8}/${den8} в неправильную дробь`;\n        translationKey = 'tasks.fractions.mixed_to_improper';\n        translationParams = { whole: whole8, num: num8, den: den8 };\n        answer = `${improper8}/${den8}`;\n        explanation = `${whole8} ${num8}/${den8} = (${whole8} × ${den8} + ${num8}) / ${den8} = ${improper8}/${den8}`;\n        explanationKey = 'tasks.fractions.mixed_to_improper_explanation';\n        explanationParams = { whole: whole8, num: num8, den: den8, result: `${improper8}/${den8}` };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n\n      case 9: // Неправильная дробь в смешанное число\n        const numerator9 = getRandomInt(7, 20);\n        const denominator9 = getRandomInt(2, 6);\n        const wholePart9 = Math.floor(numerator9 / denominator9);\n        const remainder9 = numerator9 % denominator9;\n        question = `Переведите неправильную дробь ${numerator9}/${denominator9} в смешанное число`;\n        translationKey = 'tasks.fractions.improper_to_mixed';\n        translationParams = { num: numerator9, den: denominator9 };\n        answer = remainder9 === 0 ? `${wholePart9}` : `${wholePart9} ${remainder9}/${denominator9}`;\n        explanation = `${numerator9}/${denominator9} = ${wholePart9} целых и ${remainder9}/${denominator9}`;\n        explanationKey = 'tasks.fractions.improper_to_mixed_explanation';\n        explanationParams = { num: numerator9, den: denominator9, whole: wholePart9, remainder: remainder9 };\n        answerFormat = \"смешанное число (например: 2 3/4)\";\n        formatKey = 'answerFormats.mixed_number';\n        break;\n\n      case 10: // Умножение дробей\n        const a10 = getRandomInt(1, 4);\n        const b10 = getRandomInt(2, 6);\n        const c10 = getRandomInt(1, 4);\n        const d10 = getRandomInt(2, 6);\n        const resNum10 = a10 * c10;\n        const resDen10 = b10 * d10;\n        question = `Умножьте дроби: ${a10}/${b10} × ${c10}/${d10}`;\n        translationKey = 'tasks.fractions.multiply_fractions';\n        translationParams = { a: a10, b: b10, c: c10, d: d10 };\n        answer = `${resNum10}/${resDen10}`;\n        explanation = `Умножаем числители и знаменатели: (${a10} × ${c10}) / (${b10} × ${d10}) = ${resNum10}/${resDen10}`;\n        explanationKey = 'tasks.fractions.multiply_fractions_explanation';\n        explanationParams = { a: a10, b: b10, c: c10, d: d10, result: `${resNum10}/${resDen10}` };\n        answerFormat = \"дробь\";\n        formatKey = 'answerFormats.fraction';\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey, \n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}