{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://217.160.126.178:8001/api';\n\n// Функция для получения токена\nconst getToken = () => {\n  return localStorage.getItem('authToken');\n};\n\n// Базовые настройки axios\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Добавляем interceptor для автоматической подстановки токена\napi.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// API для аутентификации\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  getMe: () => api.get('/users/me')\n};\n\n// API для курса\nexport const courseAPI = {\n  getStructure: () => api.get('/course/structure'),\n  generateTasks: dayNumber => api.get(`/course/day/${dayNumber}/tasks`),\n  getProgress: () => api.get('/course/progress'),\n  updateProgress: (day, answers, completed) => api.post(`/course/day/${day}/progress`, {\n    answers,\n    completed_tasks: completed\n  }),\n  resetProgress: () => api.delete('/course/progress')\n};\n\n// API для заданий и ответов пользователя\nexport const userAPI = {\n  // Задания\n  getTasks: day => api.get(`/user/tasks/${day}`),\n  saveTasks: (day, tasks) => api.post(`/user/tasks/${day}`, tasks),\n  // Ответы\n  getAnswers: day => day === 'all' ? api.get('/user/all-answers') // для всех ответов\n  : api.get(`/user/answers/${day}`),\n  // для конкретного дня\n\n  saveAnswer: (day, taskIndex, answer, isCorrect = false) => api.post(`/user/answer/${day}/${taskIndex}`, {\n    answer,\n    is_correct: isCorrect\n  })\n\n  // Удаляем getAllAnswers так как теперь это часть getAnswers\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","getToken","localStorage","getItem","api","create","baseURL","interceptors","request","use","config","token","headers","Authorization","authAPI","register","userData","post","login","credentials","getMe","get","courseAPI","getStructure","generateTasks","dayNumber","getProgress","updateProgress","day","answers","completed","completed_tasks","resetProgress","delete","userAPI","getTasks","saveTasks","tasks","getAnswers","saveAnswer","taskIndex","answer","isCorrect","is_correct"],"sources":["/opt/math-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://217.160.126.178:8001/api';\n\n// Функция для получения токена\nconst getToken = () => {\n  return localStorage.getItem('authToken');\n};\n\n// Базовые настройки axios\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Добавляем interceptor для автоматической подстановки токена\napi.interceptors.request.use((config) => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// API для аутентификации\nexport const authAPI = {\n  register: (userData) => api.post('/auth/register', userData),\n  login: (credentials) => api.post('/auth/login', credentials),\n  getMe: () => api.get('/users/me'),\n};\n\n// API для курса\nexport const courseAPI = {\n  getStructure: () => api.get('/course/structure'),\n  generateTasks: (dayNumber) => api.get(`/course/day/${dayNumber}/tasks`),\n  getProgress: () => api.get('/course/progress'),\n  updateProgress: (day, answers, completed) => \n    api.post(`/course/day/${day}/progress`, { answers, completed_tasks: completed }),\n  resetProgress: () => api.delete('/course/progress'),\n};\n\n// API для заданий и ответов пользователя\nexport const userAPI = {\n  // Задания\n  getTasks: (day) => api.get(`/user/tasks/${day}`),\n  saveTasks: (day, tasks) => api.post(`/user/tasks/${day}`, tasks),\n  \n  // Ответы\n  getAnswers: (day) => \n    day === 'all' \n      ? api.get('/user/all-answers')  // для всех ответов\n      : api.get(`/user/answers/${day}`),  // для конкретного дня\n  \n  saveAnswer: (day, taskIndex, answer, isCorrect = false) => \n    api.post(`/user/answer/${day}/${taskIndex}`, { answer, is_correct: isCorrect }),\n  \n  // Удаляем getAllAnswers так как теперь это часть getAnswers\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,iCAAiC;;AAEtD;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,OAAOC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;AAC1C,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN;AACX,CAAC,CAAC;;AAEF;AACAI,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGV,QAAQ,CAAC,CAAC;EACxB,IAAIU,KAAK,EAAE;IACTD,MAAM,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUF,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMI,OAAO,GAAG;EACrBC,QAAQ,EAAGC,QAAQ,IAAKZ,GAAG,CAACa,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EAC5DE,KAAK,EAAGC,WAAW,IAAKf,GAAG,CAACa,IAAI,CAAC,aAAa,EAAEE,WAAW,CAAC;EAC5DC,KAAK,EAAEA,CAAA,KAAMhB,GAAG,CAACiB,GAAG,CAAC,WAAW;AAClC,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG;EACvBC,YAAY,EAAEA,CAAA,KAAMnB,GAAG,CAACiB,GAAG,CAAC,mBAAmB,CAAC;EAChDG,aAAa,EAAGC,SAAS,IAAKrB,GAAG,CAACiB,GAAG,CAAC,eAAeI,SAAS,QAAQ,CAAC;EACvEC,WAAW,EAAEA,CAAA,KAAMtB,GAAG,CAACiB,GAAG,CAAC,kBAAkB,CAAC;EAC9CM,cAAc,EAAEA,CAACC,GAAG,EAAEC,OAAO,EAAEC,SAAS,KACtC1B,GAAG,CAACa,IAAI,CAAC,eAAeW,GAAG,WAAW,EAAE;IAAEC,OAAO;IAAEE,eAAe,EAAED;EAAU,CAAC,CAAC;EAClFE,aAAa,EAAEA,CAAA,KAAM5B,GAAG,CAAC6B,MAAM,CAAC,kBAAkB;AACpD,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG;EACrB;EACAC,QAAQ,EAAGP,GAAG,IAAKxB,GAAG,CAACiB,GAAG,CAAC,eAAeO,GAAG,EAAE,CAAC;EAChDQ,SAAS,EAAEA,CAACR,GAAG,EAAES,KAAK,KAAKjC,GAAG,CAACa,IAAI,CAAC,eAAeW,GAAG,EAAE,EAAES,KAAK,CAAC;EAEhE;EACAC,UAAU,EAAGV,GAAG,IACdA,GAAG,KAAK,KAAK,GACTxB,GAAG,CAACiB,GAAG,CAAC,mBAAmB,CAAC,CAAE;EAAA,EAC9BjB,GAAG,CAACiB,GAAG,CAAC,iBAAiBO,GAAG,EAAE,CAAC;EAAG;;EAExCW,UAAU,EAAEA,CAACX,GAAG,EAAEY,SAAS,EAAEC,MAAM,EAAEC,SAAS,GAAG,KAAK,KACpDtC,GAAG,CAACa,IAAI,CAAC,gBAAgBW,GAAG,IAAIY,SAAS,EAAE,EAAE;IAAEC,MAAM;IAAEE,UAAU,EAAED;EAAU,CAAC;;EAEhF;AACF,CAAC;AAED,eAAetC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}