{"ast":null,"code":"// day12-wordProblems.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const wordProblemsGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n    switch (type) {\n      case 1:\n        // Задача на движение\n        const speed = getRandomInt(40, 80);\n        const time = getRandomInt(2, 5);\n        const distance = speed * time;\n        question = `Автомобиль едет со скоростью ${speed} км/ч. Какое расстояние он проедет за ${time} часа?`;\n        translationKey = 'tasks.word_problems.motion';\n        translationParams = {\n          speed,\n          time\n        };\n        answer = distance.toString();\n        explanation = `Расстояние = скорость × время = ${speed} × ${time} = ${distance} км`;\n        explanationKey = 'tasks.word_problems.motion_explanation';\n        explanationParams = {\n          speed,\n          time,\n          result: distance\n        };\n        answerFormat = \"число (км)\";\n        formatKey = 'answerFormats.km';\n        break;\n      case 2:\n        // Задача на стоимость\n        const price = getRandomInt(50, 150);\n        const quantity = getRandomInt(3, 8);\n        const totalCost = price * quantity;\n        question = `Одна тетрадь стоит ${price} руб. Сколько стоят ${quantity} тетрадей?`;\n        translationKey = 'tasks.word_problems.cost';\n        translationParams = {\n          price,\n          quantity\n        };\n        answer = totalCost.toString();\n        explanation = `Стоимость = цена × количество = ${price} × ${quantity} = ${totalCost} руб`;\n        explanationKey = 'tasks.word_problems.cost_explanation';\n        explanationParams = {\n          price,\n          quantity,\n          result: totalCost\n        };\n        answerFormat = \"число (руб.)\";\n        formatKey = 'answerFormats.rub';\n        break;\n      case 3:\n        // Задача на работу\n        const workTime = getRandomInt(4, 8);\n        const workRate = getRandomInt(10, 20);\n        const totalParts = workRate * workTime;\n        question = `Рабочий делает ${workRate} деталей в час. Сколько деталей он сделает за ${workTime} часов?`;\n        translationKey = 'tasks.word_problems.work';\n        translationParams = {\n          rate: workRate,\n          time: workTime\n        };\n        answer = totalParts.toString();\n        explanation = `Детали = производительность × время = ${workRate} × ${workTime} = ${totalParts}`;\n        explanationKey = 'tasks.word_problems.work_explanation';\n        explanationParams = {\n          rate: workRate,\n          time: workTime,\n          result: totalParts\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 4:\n        // Задача на пропорции (рабочие)\n        const workers = getRandomInt(2, 5);\n        const days = getRandomInt(3, 7);\n        const newWorkers = getRandomInt(4, 8);\n        const newDays = Math.round(workers * days / newWorkers);\n        question = `${workers} рабочих выполняют работу за ${days} дней. За сколько дней выполнят работу ${newWorkers} рабочих?`;\n        translationKey = 'tasks.word_problems.ratio';\n        translationParams = {\n          workers,\n          days,\n          newWorkers\n        };\n        answer = newDays.toString();\n        explanation = `Время обратно пропорционально рабочим: (${workers} × ${days}) / ${newWorkers} = ${newDays} дней`;\n        explanationKey = 'tasks.word_problems.ratio_explanation';\n        explanationParams = {\n          workers,\n          days,\n          newWorkers,\n          result: newDays\n        };\n        answerFormat = \"число (дней)\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 5:\n        // Задача на смеси\n        const solution1 = getRandomInt(100, 200);\n        const concentration1 = getRandomInt(10, 20);\n        const solution2 = getRandomInt(50, 100);\n        const concentration2 = getRandomInt(30, 40);\n        const totalSalt = solution1 * concentration1 / 100 + solution2 * concentration2 / 100;\n        const totalSolution = solution1 + solution2;\n        const finalConc = Math.round(totalSalt / totalSolution * 100);\n        question = `Смешали ${solution1} г ${concentration1}% раствора и ${solution2} г ${concentration2}% раствора. Найдите концентрацию смеси`;\n        translationKey = 'tasks.word_problems.mixture';\n        translationParams = {\n          solution: solution1,\n          concentration: concentration1,\n          solution2,\n          concentration2\n        };\n        answer = finalConc.toString();\n        explanation = `Общая концентрация = (общая соль / общий раствор) × 100 = (${totalSalt.toFixed(1)} / ${totalSolution}) × 100 ≈ ${finalConc}%`;\n        explanationKey = 'tasks.word_problems.mixture_explanation';\n        explanationParams = {\n          solution: solution2,\n          concentration: concentration1,\n          solution2,\n          concentration2,\n          result: finalConc\n        };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n      case 6:\n        // Задача на возраст\n        const ageNow = getRandomInt(8, 12);\n        const yearsLater = getRandomInt(5, 8);\n        const fatherAgeNow = ageNow + 25;\n        const fatherAgeLater = fatherAgeNow + yearsLater;\n        question = `Сейчас сыну ${ageNow} лет, отцу ${fatherAgeNow} лет. Сколько лет будет отцу, когда сыну будет ${ageNow + yearsLater} лет?`;\n        translationKey = 'tasks.word_problems.age';\n        translationParams = {\n          age: ageNow,\n          years: yearsLater\n        };\n        answer = fatherAgeLater.toString();\n        explanation = `Разница в возрасте 25 лет. Когда сыну будет ${ageNow + yearsLater}, отцу будет ${fatherAgeLater} лет`;\n        explanationKey = 'tasks.word_problems.age_explanation';\n        explanationParams = {\n          age: ageNow,\n          years: yearsLater,\n          result: fatherAgeLater\n        };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n      case 7:\n        // Задача на скорость работы\n        const workAmount = getRandomInt(100, 200);\n        const workTime2 = getRandomInt(4, 8);\n        const workSpeed = Math.round(workAmount / workTime2);\n        question = `Рабочий выполнил ${workAmount} единиц работы за ${workTime2} часов. Найдите его производительность`;\n        translationKey = 'tasks.word_problems.work_speed';\n        translationParams = {\n          work: workAmount,\n          time: workTime2\n        };\n        answer = workSpeed.toString();\n        explanation = `Производительность = работа / время = ${workAmount} / ${workTime2} = ${workSpeed} единиц/час`;\n        explanationKey = 'tasks.word_problems.work_speed_explanation';\n        explanationParams = {\n          work: workAmount,\n          time: workTime2,\n          result: workSpeed\n        };\n        answerFormat = \"число (ед./час)\";\n        formatKey = 'answerFormats.units_per_hour';\n        break;\n      case 8:\n        // Задача на площадь\n        const length8 = getRandomInt(5, 10);\n        const width8 = getRandomInt(4, 8);\n        const area8 = length8 * width8;\n        question = `Найдите площадь комнаты длиной ${length8} м и шириной ${width8} м`;\n        translationKey = 'tasks.word_problems.area';\n        translationParams = {\n          length: length8,\n          width: width8\n        };\n        answer = area8.toString();\n        explanation = `Площадь = длина × ширина = ${length8} × ${width8} = ${area8} м²`;\n        explanationKey = 'tasks.word_problems.area_explanation';\n        explanationParams = {\n          length: length8,\n          width: width8,\n          result: area8\n        };\n        answerFormat = \"число (м²)\";\n        formatKey = 'answerFormats.m2';\n        break;\n      case 9:\n        // Задача на объем\n        const length9 = getRandomInt(4, 8);\n        const width9 = getRandomInt(3, 6);\n        const height9 = getRandomInt(2, 5);\n        const volume9 = length9 * width9 * height9;\n        question = `Найдите объем аквариума длиной ${length9} см, шириной ${width9} см и высотой ${height9} см`;\n        translationKey = 'tasks.word_problems.volume';\n        translationParams = {\n          length: length9,\n          width: width9,\n          height: height9\n        };\n        answer = volume9.toString();\n        explanation = `Объем = длина × ширина × высота = ${length9} × ${width9} × ${height9} = ${volume9} см³`;\n        explanationKey = 'tasks.word_problems.volume_explanation';\n        explanationParams = {\n          length: length9,\n          width: width9,\n          height: height9,\n          result: volume9\n        };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n      case 10:\n        // Задача на проценты (скидка)\n        const original10 = getRandomInt(200, 600);\n        const discount10 = 17;\n        const newPrice10 = original10 * (1 - discount10 / 100);\n        question = `Товар стоил ${original10} руб. Скидка ${discount10}%. Найдите новую цену.`;\n        answer = Math.round(newPrice10).toString();\n        break;\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({\n        question,\n        answer,\n        explanation,\n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey,\n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};","map":{"version":3,"names":["getRandomInt","min","max","Math","floor","random","wordProblemsGenerator","count","t","tasks","usedQuestions","Set","length","question","answer","explanation","answerFormat","translationKey","translationParams","explanationKey","explanationParams","formatKey","type","speed","time","distance","toString","result","price","quantity","totalCost","workTime","workRate","totalParts","rate","workers","days","newWorkers","newDays","round","solution1","concentration1","solution2","concentration2","totalSalt","totalSolution","finalConc","solution","concentration","toFixed","ageNow","yearsLater","fatherAgeNow","fatherAgeLater","age","years","workAmount","workTime2","workSpeed","work","length8","width8","area8","width","length9","width9","height9","volume9","height","original10","discount10","newPrice10","has","add","push"],"sources":["/opt/math-app/frontend/src/taskGenerators/day12-wordProblems.js"],"sourcesContent":["// day12-wordProblems.js\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const wordProblemsGenerator = (count, t) => {\n  const tasks = [];\n  const usedQuestions = new Set();\n\n  while (tasks.length < count) {\n    let question, answer, explanation, answerFormat;\n    let translationKey, translationParams, explanationKey, explanationParams, formatKey;\n    let type = getRandomInt(1, 10);\n\n    switch (type) {\n      case 1: // Задача на движение\n        const speed = getRandomInt(40, 80);\n        const time = getRandomInt(2, 5);\n        const distance = speed * time;\n        question = `Автомобиль едет со скоростью ${speed} км/ч. Какое расстояние он проедет за ${time} часа?`;\n        translationKey = 'tasks.word_problems.motion';\n        translationParams = { speed, time };\n        answer = distance.toString();\n        explanation = `Расстояние = скорость × время = ${speed} × ${time} = ${distance} км`;\n        explanationKey = 'tasks.word_problems.motion_explanation';\n        explanationParams = { speed, time, result: distance };\n        answerFormat = \"число (км)\";\n        formatKey = 'answerFormats.km';\n        break;\n\n      case 2: // Задача на стоимость\n        const price = getRandomInt(50, 150);\n        const quantity = getRandomInt(3, 8);\n        const totalCost = price * quantity;\n        question = `Одна тетрадь стоит ${price} руб. Сколько стоят ${quantity} тетрадей?`;\n        translationKey = 'tasks.word_problems.cost';\n        translationParams = { price, quantity };\n        answer = totalCost.toString();\n        explanation = `Стоимость = цена × количество = ${price} × ${quantity} = ${totalCost} руб`;\n        explanationKey = 'tasks.word_problems.cost_explanation';\n        explanationParams = { price, quantity, result: totalCost };\n        answerFormat = \"число (руб.)\";\n        formatKey = 'answerFormats.rub';\n        break;\n\n      case 3: // Задача на работу\n        const workTime = getRandomInt(4, 8);\n        const workRate = getRandomInt(10, 20);\n        const totalParts = workRate * workTime;\n        question = `Рабочий делает ${workRate} деталей в час. Сколько деталей он сделает за ${workTime} часов?`;\n        translationKey = 'tasks.word_problems.work';\n        translationParams = { rate: workRate, time: workTime };\n        answer = totalParts.toString();\n        explanation = `Детали = производительность × время = ${workRate} × ${workTime} = ${totalParts}`;\n        explanationKey = 'tasks.word_problems.work_explanation';\n        explanationParams = { rate: workRate, time: workTime, result: totalParts };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 4: // Задача на пропорции (рабочие)\n        const workers = getRandomInt(2, 5);\n        const days = getRandomInt(3, 7);\n        const newWorkers = getRandomInt(4, 8);\n        const newDays = Math.round((workers * days) / newWorkers);\n        question = `${workers} рабочих выполняют работу за ${days} дней. За сколько дней выполнят работу ${newWorkers} рабочих?`;\n        translationKey = 'tasks.word_problems.ratio';\n        translationParams = { workers, days, newWorkers };\n        answer = newDays.toString();\n        explanation = `Время обратно пропорционально рабочим: (${workers} × ${days}) / ${newWorkers} = ${newDays} дней`;\n        explanationKey = 'tasks.word_problems.ratio_explanation';\n        explanationParams = { workers, days, newWorkers, result: newDays };\n        answerFormat = \"число (дней)\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 5: // Задача на смеси\n        const solution1 = getRandomInt(100, 200);\n        const concentration1 = getRandomInt(10, 20);\n        const solution2 = getRandomInt(50, 100);\n        const concentration2 = getRandomInt(30, 40);\n        const totalSalt = solution1 * concentration1/100 + solution2 * concentration2/100;\n        const totalSolution = solution1 + solution2;\n        const finalConc = Math.round((totalSalt / totalSolution) * 100);\n        question = `Смешали ${solution1} г ${concentration1}% раствора и ${solution2} г ${concentration2}% раствора. Найдите концентрацию смеси`;\n        translationKey = 'tasks.word_problems.mixture';\n        translationParams = { solution: solution1, concentration: concentration1, solution2, concentration2 };\n        answer = finalConc.toString();\n        explanation = `Общая концентрация = (общая соль / общий раствор) × 100 = (${totalSalt.toFixed(1)} / ${totalSolution}) × 100 ≈ ${finalConc}%`;\n        explanationKey = 'tasks.word_problems.mixture_explanation';\n        explanationParams = { solution: solution2, concentration: concentration1, solution2, concentration2, result: finalConc };\n        answerFormat = \"процент\";\n        formatKey = 'answerFormats.percentage';\n        break;\n\n      case 6: // Задача на возраст\n        const ageNow = getRandomInt(8, 12);\n        const yearsLater = getRandomInt(5, 8);\n        const fatherAgeNow = ageNow + 25;\n        const fatherAgeLater = fatherAgeNow + yearsLater;\n        question = `Сейчас сыну ${ageNow} лет, отцу ${fatherAgeNow} лет. Сколько лет будет отцу, когда сыну будет ${ageNow + yearsLater} лет?`;\n        translationKey = 'tasks.word_problems.age';\n        translationParams = { age: ageNow, years: yearsLater };\n        answer = fatherAgeLater.toString();\n        explanation = `Разница в возрасте 25 лет. Когда сыну будет ${ageNow + yearsLater}, отцу будет ${fatherAgeLater} лет`;\n        explanationKey = 'tasks.word_problems.age_explanation';\n        explanationParams = { age: ageNow, years: yearsLater, result: fatherAgeLater };\n        answerFormat = \"число\";\n        formatKey = 'answerFormats.number';\n        break;\n\n      case 7: // Задача на скорость работы\n        const workAmount = getRandomInt(100, 200);\n        const workTime2 = getRandomInt(4, 8);\n        const workSpeed = Math.round(workAmount / workTime2);\n        question = `Рабочий выполнил ${workAmount} единиц работы за ${workTime2} часов. Найдите его производительность`;\n        translationKey = 'tasks.word_problems.work_speed';\n        translationParams = { work: workAmount, time: workTime2 };\n        answer = workSpeed.toString();\n        explanation = `Производительность = работа / время = ${workAmount} / ${workTime2} = ${workSpeed} единиц/час`;\n        explanationKey = 'tasks.word_problems.work_speed_explanation';\n        explanationParams = { work: workAmount, time: workTime2, result: workSpeed };\n        answerFormat = \"число (ед./час)\";\n        formatKey = 'answerFormats.units_per_hour';\n        break;\n\n      case 8: // Задача на площадь\n        const length8 = getRandomInt(5, 10);\n        const width8 = getRandomInt(4, 8);\n        const area8 = length8 * width8;\n        question = `Найдите площадь комнаты длиной ${length8} м и шириной ${width8} м`;\n        translationKey = 'tasks.word_problems.area';\n        translationParams = { length: length8, width: width8 };\n        answer = area8.toString();\n        explanation = `Площадь = длина × ширина = ${length8} × ${width8} = ${area8} м²`;\n        explanationKey = 'tasks.word_problems.area_explanation';\n        explanationParams = { length: length8, width: width8, result: area8 };\n        answerFormat = \"число (м²)\";\n        formatKey = 'answerFormats.m2';\n        break;\n\n      case 9: // Задача на объем\n        const length9 = getRandomInt(4, 8);\n        const width9 = getRandomInt(3, 6);\n        const height9 = getRandomInt(2, 5);\n        const volume9 = length9 * width9 * height9;\n        question = `Найдите объем аквариума длиной ${length9} см, шириной ${width9} см и высотой ${height9} см`;\n        translationKey = 'tasks.word_problems.volume';\n        translationParams = { length: length9, width: width9, height: height9 };\n        answer = volume9.toString();\n        explanation = `Объем = длина × ширина × высота = ${length9} × ${width9} × ${height9} = ${volume9} см³`;\n        explanationKey = 'tasks.word_problems.volume_explanation';\n        explanationParams = { length: length9, width: width9, height: height9, result: volume9 };\n        answerFormat = \"число (в см³)\";\n        formatKey = 'answerFormats.cm3';\n        break;\n\n      case 10: // Задача на проценты (скидка)\n        const original10 = getRandomInt(200, 600);\n        const discount10 = 17;\n        const newPrice10 = original10 * (1 - discount10/100);\n        question = `Товар стоил ${original10} руб. Скидка ${discount10}%. Найдите новую цену.`;\n        answer = Math.round(newPrice10).toString();\n        break;\n\n      default:\n        type = getRandomInt(1, 10);\n        continue;\n    }\n\n    if (!usedQuestions.has(question)) {\n      usedQuestions.add(question);\n      tasks.push({ \n        question, \n        answer, \n        explanation, \n        answerFormat,\n        translationKey,\n        translationParams,\n        explanationKey, \n        explanationParams,\n        formatKey\n      });\n    }\n  }\n  return tasks;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}