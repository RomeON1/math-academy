import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { courseAPI } from '../services/api';

const UserProfile = ({ user, onClose, onGradeChange }) => {
  const { t } = useTranslation();
  const [currentGrade, setCurrentGrade] = useState(user?.grade || 6);
  const [gradeHistory, setGradeHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [activeSection, setActiveSection] = useState('profile');

  useEffect(() => {
    if (user) {
      setCurrentGrade(user.grade);
      fetchGradeHistory();
    }
  }, [user]);

  const fetchGradeHistory = async () => {
    try {
      const response = await courseAPI.getGradeHistory(user.id);
      setGradeHistory(response.data);
    } catch (error) {
      console.error('Error fetching grade history:', error);
    }
  };

  const handleGradeChange = async () => {
    if (currentGrade === user.grade) return;
    
    setLoading(true);
    setMessage('');
    
    try {
      await courseAPI.updateUserGrade(user.id, currentGrade);
      setMessage(t('profile.gradeUpdated', '–ö–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!'));
      if (onGradeChange) {
        onGradeChange(currentGrade);
      }
      await fetchGradeHistory();
    } catch (error) {
      setMessage(t('profile.updateError', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞'));
      console.error('Error updating grade:', error);
    } finally {
      setLoading(false);
    }
  };

  if (!user) return null;

  // ===== –†–ê–ó–î–ï–õ–´ –õ–ò–ß–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê =====

  const renderProfileSection = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900 dark:text-white">üë§ –ü—Ä–æ—Ñ–∏–ª—å</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            {t('profile.username', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')}
          </label>
          <div className="text-lg font-semibold text-gray-900 dark:text-white p-2 bg-gray-50 dark:bg-gray-700 rounded">
            {user.username}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            {t('profile.email', 'Email')}
          </label>
          <div className="text-lg font-semibold text-gray-900 dark:text-white p-2 bg-gray-50 dark:bg-gray-700 rounded">
            {user.email}
          </div>
        </div>

        {/* –°–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∞ - –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –ë–õ–û–ö */}
        <div className="md:col-span-2">
          <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 border border-gray-200 dark:border-gray-600">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
              {t('profile.currentGrade', '–¢–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å')}
            </label>
            <div className="flex flex-col sm:flex-row gap-3 items-start sm:items-center">
              <select
                className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                value={currentGrade}
                onChange={(e) => setCurrentGrade(parseInt(e.target.value))}
                disabled={loading}
              >
                {Array.from({ length: 11 }, (_, i) => i + 1).map(grade => (
                  <option key={grade} value={grade}>
                    {t('profile.grade', '–ö–ª–∞—Å—Å')} {grade}
                  </option>
                ))}
              </select>
              
              <button
                onClick={handleGradeChange}
                disabled={loading || currentGrade === user.grade}
                className="px-6 py-2 bg-blue-500 hover:bg-blue-600 disabled:bg-blue-300 text-white rounded-lg font-medium transition-colors whitespace-nowrap"
              >
                {loading ? t('profile.updating', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...') : t('profile.updateGrade', '–û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å')}
              </button>
            </div>
            
            {/* –°–æ–æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ */}
            {message && (
              <div className={`mt-3 p-3 rounded-md ${
                message.includes('–û—à–∏–±–∫–∞') 
                  ? 'bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300'
                  : 'bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300'
              }`}>
                {message}
              </div>
            )}
          </div>
        </div>

        {/* –ù–æ–≤—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –í–æ–∑—Ä–∞—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          </label>
          <input
            type="number"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç"
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –®–∫–æ–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          </label>
          <input
            type="text"
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã"
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –†–µ–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –≤ —à–∫–æ–ª–µ
          </label>
          <input
            type="number"
            placeholder="–í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å"
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          />
        </div>

        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          </label>
          <input
            type="text"
            placeholder="–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          />
        </div>

        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –ì–æ—Ä–æ–¥/—Ä–µ–≥–∏–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          </label>
          <input
            type="text"
            placeholder="–í–∞—à –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω"
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          />
        </div>
      </div>

      {/* –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∞—Å—Å–æ–≤ */}
      {gradeHistory.length > 0 && (
        <div className="pt-6 border-t border-gray-200 dark:border-gray-600">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">
            {t('profile.gradeHistory', '–ò—Å—Ç–æ—Ä–∏—è –∫–ª–∞—Å—Å–æ–≤')}
          </h3>
          <div className="space-y-2">
            {gradeHistory.map((record, index) => (
              <div key={record.id} className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <span className="text-gray-900 dark:text-white font-medium">
                  {t('profile.grade', '–ö–ª–∞—Å—Å')} {record.grade}
                </span>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {new Date(record.start_date).toLocaleDateString()}
                </span>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );

  const renderProgressSection = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900 dark:text-white">üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
      <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
        <p className="text-yellow-800 dark:text-yellow-200">
          –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!
        </p>
      </div>
    </div>
  );

  const renderAchievementsSection = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900 dark:text-white">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
      <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
        <p className="text-yellow-800 dark:text-yellow-200">
          –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –Ω–∞–≥—Ä–∞–¥ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!
        </p>
      </div>
    </div>
  );

  const renderSettingsSection = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900 dark:text-white">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è</h2>
      <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
        <p className="text-yellow-800 dark:text-yellow-200">
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å —Å–∫–æ—Ä–æ!
        </p>
      </div>
    </div>
  );

  const renderCalendarSection = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900 dark:text-white">üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å</h2>
      <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
        <p className="text-yellow-800 dark:text-yellow-200">
          –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±—É—á–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!
        </p>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (activeSection) {
      case 'profile': return renderProfileSection();
      case 'progress': return renderProgressSection();
      case 'achievements': return renderAchievementsSection();
      case 'settings': return renderSettingsSection();
      case 'calendar': return renderCalendarSection();
      default: return renderProfileSection();
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-gray-800 rounded-xl w-full max-w-6xl h-5/6 flex flex-col md:flex-row">
        {/* –°–∞–π–¥–±–∞—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –¥–µ—Å–∫—Ç–æ–ø */}
        <div className="hidden md:flex md:w-1/4 bg-gray-50 dark:bg-gray-700 rounded-l-xl p-6 flex-col">
          <div className="flex-1">
            <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-6">
              {t('profile.title', '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')}
            </h3>
            <nav className="space-y-2">
              {[
                { id: 'profile', label: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' },
                { id: 'progress', label: 'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å' },
                { id: 'achievements', label: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è' },
                { id: 'settings', label: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' },
                { id: 'calendar', label: 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å' }
              ].map((item) => (
                <button
                  key={item.id}
                  onClick={() => setActiveSection(item.id)}
                  className={`w-full text-left p-3 rounded-lg transition-colors ${
                    activeSection === item.id
                      ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
                      : 'hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300'
                  }`}
                >
                  {item.label}
                </button>
              ))}
            </nav>
          </div>
          
          <button
            onClick={onClose}
            className="w-full p-3 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors border-t border-gray-200 dark:border-gray-600 mt-4"
          >
            ‚Üê –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>

        {/* –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="md:hidden bg-gray-50 dark:bg-gray-700 p-4 border-b border-gray-200 dark:border-gray-600">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-bold text-gray-900 dark:text-white">
              {t('profile.title', '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')}
            </h3>
            <button
              onClick={onClose}
              className="p-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
            >
              ‚úï
            </button>
          </div>
          <div className="flex space-x-2 overflow-x-auto pb-2">
            {[
              { id: 'profile', label: 'üë§' },
              { id: 'progress', label: 'üìä' },
              { id: 'achievements', label: 'üèÜ' },
              { id: 'settings', label: '‚öôÔ∏è' },
              { id: 'calendar', label: 'üìÖ' }
            ].map((item) => (
              <button
                key={item.id}
                onClick={() => setActiveSection(item.id)}
                className={`flex-shrink-0 px-3 py-2 rounded-lg text-sm transition-colors ${
                  activeSection === item.id
                    ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
                    : 'bg-white dark:bg-gray-600 text-gray-700 dark:text-gray-300'
                }`}
              >
                {item.label}
              </button>
            ))}
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
        <div className="flex-1 overflow-y-auto p-6">
          {renderContent()}
        </div>
      </div>
    </div>
  );
};

export default UserProfile;
