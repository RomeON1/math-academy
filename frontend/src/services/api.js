import axios from 'axios';

const getAPIBaseURL = () => {
  return '/api';
};

const API_BASE_URL = getAPIBaseURL();

const getToken = () => {
  return localStorage.getItem('authToken');
};

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 15000,
  withCredentials: false,
});

api.interceptors.request.use(
  (config) => {
    const token = getToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log(`üîê –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å: ${config.url}`);
    } else {
      console.log(`‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: ${config.url}`);
    }
    config.headers['Content-Type'] = 'application/json';
    config.headers['Accept'] = 'application/json';
    console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    console.error('‚ùå Request Interceptor Error:', error);
    return Promise.reject(error);
  }
);

api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Success: ${response.status} ${response.config.url}`);
    return response;
  },
  (error) => {
    console.error('‚ùå API Error Details:', error);
    return Promise.reject(error);
  }
);

export const authAPI = {
  register: (userData) => 
    api.post('/auth/register', userData).then(response => {
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ');
      const userDataToSave = {
        id: response.data.id,
        name: response.data.username,
        email: response.data.email,
        isLoggedIn: true
      };
      localStorage.setItem('userData', JSON.stringify(userDataToSave));
      return response;
    }),
  
  login: (credentials) => 
    api.post('/auth/login', credentials).then(response => {
      console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ');
      
      if (response.data.access_token) {
        localStorage.setItem('authToken', response.data.access_token);
        console.log('üîê –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
      }
      
      const userDataToSave = {
        id: response.data.user_id,
        name: response.data.username,
        email: response.data.email,
        isLoggedIn: true
      };
      localStorage.setItem('userData', JSON.stringify(userDataToSave));
      
      return response;
    }),
  
  getMe: () => api.get('/auth/me'),
};

export const courseAPI = {
  getStructure: () => api.get('/course/structure'),
  generateTasks: (dayNumber) => api.get(`/course/day/${dayNumber}/tasks`),
  getProgress: () => api.get('/course/progress'),
  updateProgress: (day, answers, completed) => 
    api.post(`/course/progress/${day}`, { completed_tasks: completed }),
  resetProgress: () => api.post('/course/reset-progress'),
};

export const userAPI = {
  getAllTasks: () => api.get('/users/tasks'),
  getTasks: (day) => api.get(`/users/tasks/${day}`),
  
  // üü¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  saveTasks: (day, tasks) => {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ –ë–î:', { day, tasks });
    
    const formattedTasks = tasks.map(task => ({
      question: task.question || '',
      answer: task.answer || '',
      explanation: task.explanation || '',
      // üü¢ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –ü–û–õ–Ø –í snake_case
      answer_format: task.answerFormat || 'number',
      translation_key: task.translationKey || null,
      translation_params: task.translationParams || null,
      task_data: {
        explanationKey: task.explanationKey || null,
        explanationParams: task.explanationParams || null,
        formatKey: task.formatKey || null
      }
    }));
    
    console.log('üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', formattedTasks);
    return api.post(`/users/tasks/${day}`, formattedTasks);
  },
  
  getAnswers: () => api.get('/users/answers'),
  saveAnswer: (day, taskIndex, answer, isCorrect = false) => 
    api.post(`/users/answers/${day}/${taskIndex}`, { 
      answer, 
      is_correct: isCorrect 
    }),
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞—Å—Å–∞–º–∏
export const gradeAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
  getAvailableGrades: () => {
    return api.get('/grades');
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserGrade: (userId, newGrade) => {
    return api.post(`/users/${userId}/grade`, null, {
      params: { new_grade: newGrade }
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∞—Å—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getGradeHistory: (userId) => {
    return api.get(`/users/${userId}/grade-history`);
  }
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
export const subjectAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  getAvailableSubjects: () => {
    return api.get('/subjects');
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserSubject: (userId, newSubject) => {
    return api.post(`/users/${userId}/subject`, null, {
      params: { new_subject: newSubject }
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getSubjectHistory: (userId) => {
    return api.get(`/users/${userId}/subject-history`);
  }
};

// –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–û–§–ò–õ–Ø –ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô
export const profileAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserProfile: (userId) => {
    return api.get(`/users/${userId}/profile`);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserProfile: (userId, profileData) => {
    return api.put(`/users/${userId}/profile`, profileData);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserTeachers: (userId) => {
    return api.get(`/users/${userId}/teachers`);
  },

  // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
  addUserTeacher: (userId, teacherData) => {
    return api.post(`/users/${userId}/teachers`, teacherData);
  },

  // –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
  removeUserTeacher: (userId, teacherId) => {
    return api.delete(`/users/${userId}/teachers/${teacherId}`);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
  updateUserTeachers: (userId, teachersData) => {
    return api.put(`/users/${userId}/teachers`, teachersData);
  }
};

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
export const statsAPI = {
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getStatsOverview: () => {
    const user = JSON.parse(localStorage.getItem('userData'));
    if (!user) throw new Error('User not authenticated');
    return api.get(`/users/${user.id}/stats/overview`);
  },

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–Ω—è–º
  getStatsProgress: () => {
    const user = JSON.parse(localStorage.getItem('userData'));
    if (!user) throw new Error('User not authenticated');
    return api.get(`/users/${user.id}/stats/progress`);
  },

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
  getStatsPerformance: () => {
    const user = JSON.parse(localStorage.getItem('userData'));
    if (!user) throw new Error('User not authenticated');
    return api.get(`/users/${user.id}/stats/performance`);
  }

  // üü¢ –£–ë–†–ê–ù –ú–ï–¢–û–î –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –¢–ò–ü–ê–ú –ó–ê–î–ê–ù–ò–ô
};

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ courseAPI –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
courseAPI.updateUserGrade = gradeAPI.updateUserGrade;
courseAPI.getGradeHistory = gradeAPI.getGradeHistory;
courseAPI.getAvailableGrades = gradeAPI.getAvailableGrades;

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ courseAPI –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
courseAPI.updateUserSubject = subjectAPI.updateUserSubject;
courseAPI.getSubjectHistory = subjectAPI.getSubjectHistory;
courseAPI.getAvailableSubjects = subjectAPI.getAvailableSubjects;

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ñ–∏–ª—è –≤ courseAPI
courseAPI.getUserProfile = profileAPI.getUserProfile;
courseAPI.updateUserProfile = profileAPI.updateUserProfile;
courseAPI.getUserTeachers = profileAPI.getUserTeachers;
courseAPI.addUserTeacher = profileAPI.addUserTeacher;
courseAPI.removeUserTeacher = profileAPI.removeUserTeacher;
courseAPI.updateUserTeachers = profileAPI.updateUserTeachers;

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ courseAPI
courseAPI.getStatsOverview = statsAPI.getStatsOverview;
courseAPI.getStatsProgress = statsAPI.getStatsProgress;
courseAPI.getStatsPerformance = statsAPI.getStatsPerformance;

// üü¢ –£–ë–†–ê–ù –ú–ï–¢–û–î –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –¢–ò–ü–ê–ú –ó–ê–î–ê–ù–ò–ô –ò–ó courseAPI

export default api;
